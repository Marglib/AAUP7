<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int nodes = //HOLDER_NUMBER_OF_NODES
const int numEdges = //HOLDER_NUMBER_OF_EDGES
//HOLDER_NUMBER_OF_CARS
const int pid[N] = //HOLDER_CAR_PID 
int route[N][nodes] = //HOLDER_CAR_ROUTE 
//HOLDER_NODE_POSITIONS

int timePassed[N] = //HOLDER_TIME_PASSED
int currentStartNode[N] = //HOLDER_CURRENT_START_NODE
typedef int[0,nodes] node_t;

//HOLDER_EDGES

int curr_car = 0;
int uniquetest = 0;
int reroute[N];
int carDone[N];
const int horizon = 20;
int Done = 0;
int totalTravelTime = 0;

int inNodes[20] = {17, 18, 19, 20, 34, 35, 36, 37, 38, 39, 45 ,44, 43,42,41,40,27,25,23,21};

typedef int[0, N-1] id_car;

broadcast chan Reroute, DoneRerouting;

int getEdgeIndex(int fromNode, int toNode)
{
    int k = 0;
    while(networkEdges[k][0] != fromNode || networkEdges[k][1] != toNode)
    {
        k++;
    }
    return k;
}

int getNextRouteNode(int carId, int node)
{
    int i = 0;
    while(route[carId][i] != node &amp;&amp; route[carId][i] != -1)
    {
        i++;
    }
    return route[carId][i+1];
}</declaration>
	<template>
		<name x="5" y="5">Simulator</name>
		<declaration>clock x,y,z;



void constructor()
{
    int i = 0;

    for(i = 0; i &lt; N; i++)
    {
        reroute[i] = 0;
        carDone[i] = 0;
    }
}


//check if cars have changed edge
void flow_traffic()
{
    int i = 0;
    int currentEdge = 0;
    int timePassedCarI = 0;
    int edgeTT = 0;
    int edgeId;
    int fromNode, toNode;    
    int allDone = 0;


    for (i = 0; i &lt; N; i++)
    {
        allDone += carDone[i];
        if(!carDone[i])
        {
            timePassedCarI = timePassed[i];
            
            fromNode = currentStartNode[i];
            toNode = getNextRouteNode(i, fromNode);

            if(toNode == -1)
            {
                carDone[i] = 1;
            }
            else
            {
                edgeId = getEdgeIndex(fromNode, toNode);
        
                edgeTT = networkEdges[edgeId][3];

                if(timePassedCarI &gt;= edgeTT)
                {
                    currentStartNode[i] = toNode;
                    totalTravelTime += timePassedCarI;
                    timePassed[i] = 0;
                }
                else
                {
                    //update time passed
                    timePassed[i] += 1;
                }
            }
        }
    }

    if(allDone == N)
    {
        Done = 1;
    }

}

int get_cars_on_edge(int edgeId)
{
    int i = 0, j = 0;
    int fromNode = 0, toNode = 0;
    int carsOnEdge = 0;
    for(i = 0; i &lt; N; i++)
    {
        if(!carDone[i])
        {
            fromNode = currentStartNode[i];
            toNode = getNextRouteNode(i, fromNode);

            if(toNode == -1)
            {
                carDone[i] = 1;
            }
            else if(edgeId == getEdgeIndex(fromNode, toNode))
            {
                carsOnEdge++;
            }     
        }
    }
    return carsOnEdge;
}

//TODO: add better calculation of weights
void update_weights()
{
    int i = 0;
    int carsOnEdge = 0;
    int toNode, fromNode;
    int newWeight = 0;
    
    for(i = 0; i &lt; numEdges; i++)
    {
        carsOnEdge = get_cars_on_edge(i);
        newWeight = 15 + (carsOnEdge / networkEdges[i][2]);
        networkEdges[i][3] = newWeight;
    }
}

void check_reroute()
{
    int i = 0, j = 0;
    int fromNode, nextFromNode, nextToNode;
    int edgeId;
    int weight;
    int threshold = 25; //TODO: find actual threshold for rerouting

    for(i = 0; i &lt; N; i++)
    {
        if(!carDone[i])
        {
            j = 0;
            fromNode = currentStartNode[i];
        
            while(fromNode != route[i][j] &amp;&amp; route[i][j] != -1)
            {
                j++;
            }

            if(route[i][j+2] != -1)
            {
                nextFromNode = route[i][j+1];
                nextToNode = route[i][j+2];

                edgeId = getEdgeIndex(nextFromNode, nextToNode);

                weight = networkEdges[edgeId][3];

                if(weight &gt; threshold)
                {
                    reroute[i] = 1;
                }
            }
        }
      
    }
       
}</declaration>
		<location id="id0" x="-246" y="-17">
			<label kind="invariant" x="-314" y="0">y &lt;= 5 &amp;&amp;
z &lt;= 1</label>
		</location>
		<location id="id1" x="-17" y="-17">
			<label kind="invariant" x="-34" y="0">z &lt;= 1</label>
		</location>
		<location id="id2" x="-518" y="-255">
			<name x="-528" y="-289">Init</name>
			<committed/>
		</location>
		<location id="id3" x="-246" y="-255">
			<urgent/>
		</location>
		<location id="id4" x="-9" y="-255">
			<urgent/>
		</location>
		<location id="id5" x="289" y="-255">
			<name x="279" y="-289">End</name>
		</location>
		<location id="id6" x="76" y="-127">
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="68" y="-51">DoneRerouting?</label>
			<nail x="76" y="-68"/>
		</transition>
		<transition controllable="false">
			<source ref="id4"/>
			<target ref="id6"/>
			<label kind="guard" x="93" y="-212">x &lt; horizon &amp;&amp; Done == 0</label>
			<label kind="synchronisation" x="93" y="-195">Reroute!</label>
			<nail x="76" y="-195"/>
		</transition>
		<transition controllable="false">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="34" y="-280">x &gt;= horizon || Done == 1</label>
		</transition>
		<transition controllable="false">
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="guard" x="-399" y="-153">y == 5</label>
			<label kind="assignment" x="-391" y="-119">y = 0</label>
			<nail x="-331" y="-76"/>
			<nail x="-331" y="-178"/>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="assignment" x="-195" y="-280">check_reroute()</label>
		</transition>
		<transition controllable="false">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-170" y="43">z == 1 &amp;&amp; y &lt; 5</label>
			<label kind="assignment" x="-170" y="26">z = 0</label>
			<nail x="-195" y="17"/>
			<nail x="-68" y="17"/>
		</transition>
		<transition controllable="false">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-170" y="-76">z == 1</label>
			<label kind="assignment" x="-238" y="-93">flow_traffic(), update_weights()</label>
			<nail x="-68" y="-51"/>
			<nail x="-195" y="-51"/>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="assignment" x="-442" y="-280">constructor()</label>
		</transition>
	</template>
	<template>
		<name>Rerouter</name>
		<declaration>int connectingNodes[3];

void getConnectingNodes(int node, int prevNode)
{
    int i = 0;
    int foundNodes = 0;
    int edge[4];
    connectingNodes[0] = -1;
    connectingNodes[1] = -1;
    connectingNodes[2] = -1;

    for(i = 0; i &lt; numEdges; i++)
    {
        edge = networkEdges[i];
        if(edge[0] == node &amp;&amp; edge[1] != prevNode)
        {
            connectingNodes[foundNodes] = edge[1];
            foundNodes++;
        }
    }

}

int manhattanDistance(int node1, int node2)
{
    int i = 0, j = 0;

    while(node1 != nodePositions[i][0])
    {
        i++;
    }
    while(node2 != nodePositions[j][0])
    {
        j++;
    }

    return abs(nodePositions[i][1] - nodePositions[j][1]) + abs(nodePositions[i][2] - nodePositions[j][2]);
}

void simpleReroute()
{
    int carRoute[nodes] = route[curr_car];
    int i = 0, j = 0, k = 0;
    int destNode;
    int curNode = currentStartNode[curr_car];
    int edgeWeights[3];
    int prevNode = curNode;
    int rerouteNode;
    int edgeId, edgeWeight, bestConnection;
    int test[1];
    int illegalInNode = 0;

    while (carRoute[i+1] != -1)
    {            
        i++;
    }

    destNode = carRoute[i];
    if (curNode != destNode)
    {
        rerouteNode = getNextRouteNode(curr_car, curNode);
        i = 0;

        while(rerouteNode != carRoute[i])
        {
            i++;
        }

        while (rerouteNode != destNode)
        {
            edgeId = 0;
            edgeWeight = 0; 
            j = 0;
            bestConnection = 0;

            getConnectingNodes(rerouteNode, prevNode);
        
            for (j = 0; j &lt; 3; j++)
            {   
                if(connectingNodes[j] != -1)
                {
                    edgeId = getEdgeIndex(rerouteNode, connectingNodes[j]);

                    edgeWeight = networkEdges[edgeId][3];

                    edgeWeights[j] = manhattanDistance(connectingNodes[j], destNode);

                    for(k = 0; k &lt; 20; k++)
                    {
                        if(connectingNodes[j] == inNodes[k] &amp;&amp; inNodes[k] != destNode)
                        {
                            illegalInNode = 1;
                        }
                    }

                    if(illegalInNode == 1)
                    {
                        edgeWeights[j] = 32000;
                    }            
                    if( edgeWeights[j] &lt;  edgeWeights[bestConnection])
                    {
                        bestConnection = j;
                    }
                    illegalInNode = 0;
                }
            } 
        
            carRoute[i + 1] = connectingNodes[bestConnection];
            prevNode = rerouteNode;
            rerouteNode = connectingNodes[bestConnection];
            i++;        
        }

        while(i &lt; (nodes-1))
        {
            carRoute[i+1] = -1;
        }         

        route[curr_car] = carRoute;

    }
    
}

void choose_route(int strategy)
{
    if(!carDone[curr_car])
    {
        reroute[curr_car] = 0;   
    
        if(strategy == 1)
        {
            simpleReroute();
        }
        else if (strategy == 2)
        {
            //Keep current route
        }
    }

}</declaration>
		<location id="id7" x="-909" y="-195">
		</location>
		<location id="id8" x="-714" y="-195">
			<urgent/>
		</location>
		<location id="id9" x="-510" y="-195">
			<urgent/>
		</location>
		<location id="id10" x="-314" y="-289">
			<urgent/>
		</location>
		<location id="id11" x="-314" y="-110">
			<urgent/>
		</location>
		<location id="id12" x="-110" y="-195">
			<urgent/>
		</location>
		<location id="id13" x="59" y="-195">
			<committed/>
		</location>
		<init ref="id7"/>
		<transition controllable="false">
			<source ref="id8"/>
			<target ref="id12"/>
			<label kind="guard" x="-696" y="-416">reroute[curr_car] == 0</label>
			<nail x="-714" y="-382"/>
			<nail x="-110" y="-382"/>
		</transition>
		<transition controllable="false">
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="guard" x="-696" y="-229">reroute[curr_car] == 1</label>
		</transition>
		<transition controllable="false">
			<source ref="id13"/>
			<target ref="id7"/>
			<label kind="assignment" x="-408" y="85">curr_car = 0</label>
			<nail x="59" y="76"/>
			<nail x="-909" y="76"/>
		</transition>
		<transition controllable="false">
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="-68" y="-221">curr_car &gt;= (N-1)</label>
			<label kind="synchronisation" x="-76" y="-238">DoneRerouting!</label>
		</transition>
		<transition controllable="false">
			<source ref="id12"/>
			<target ref="id8"/>
			<label kind="guard" x="-450" y="8">curr_car &lt; (N-1)</label>
			<label kind="assignment" x="-450" y="-17">curr_car++</label>
			<nail x="-110" y="-25"/>
			<nail x="-714" y="-25"/>
		</transition>
		<transition controllable="false">
			<source ref="id10"/>
			<target ref="id12"/>
		</transition>
		<transition controllable="false">
			<source ref="id11"/>
			<target ref="id12"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id11"/>
			<label kind="assignment" x="-501" y="-127">choose_route(1)</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="assignment" x="-501" y="-280">choose_route(0)</label>
		</transition>
		<transition controllable="false">
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-841" y="-221">Reroute?</label>
		</transition>
	</template>
	<system>// Place template instantiations here.


// List one or more processes to be composed into a system.
system Simulator, Rerouter;
    </system>
	<queries>
		<query>
			<formula>E&lt;&gt; Simulator.End</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy Opt =minE (totalTravelTime) [&lt;=horizon]: &lt;&gt; Simulator.End</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
