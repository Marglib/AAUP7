<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int routeLenght = 25;
const int nodes = 57;
const int numEdges = 144;
const int N = 310;

const int pid[N] = {1010,
1100,1102,1104,1105,1106,1107,1111,1112,1113,1115,1119,1120,1122,1125,1129,1132,1133,1134,1135,1136,1137,1139,1140,1142,1143,1144,1145,1146,1148,1149,1151,1152,1154,1155,1156,1157,1158,1016,1160,1161,1162,1163,1164,1165,1166,1169,1017,1170,1171,1172,
1173,1174,1175,1176,1177,1178,1180,1181,1183,1184,1185,1186,1187,1188,1189,1019,1190,1191,1192,1193,1194,1195,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,
1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1026,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,
1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,
1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1357,1358,1359,1360,1361,1364,1365,1367,1368,1037,1370,1371,1372,1374,1376,1377,1379,1380,1381,1382,1383,
1385,1387,1388,1389,1390,1393,1394,1398,1399,1400,1402,1403,1404,1407,1408,1410,1411,1414,1415,1416,1417,1418,1419,1422,1425,1426,1427,1428,1429,1435,1439,1044,1440,1442,1443,1446,1448,1449,1045,1049,1050,1052,1054,1059,1061,1063,1065,1071,1073,1078,
1080,1081,1082,1085,1086,1087,1009,1097,1099}; 
int route[N][routeLenght] = {
{27,51,13,50,14,49,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,8,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,49,14,50,13,29,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{40,29,30,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,48,31,30,29,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,24,26,28,52,16,32,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,8,12,16,32,31,30,29,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,1,2,3,4,22,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,24,26,28,52,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,4,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,8,12,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{35,22,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{39,33,32,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,24,8,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,2,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,24,26,28,33,32,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,4,22,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,1,2,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,47,16,52,28,33,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,47,16,12,8,4,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,6,5,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,4,22,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,26,24,22,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{44,32,16,12,8,7,6,5,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,10,6,2,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{39,33,32,16,12,8,4,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,24,8,7,6,10,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,2,1,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,6,5,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{39,33,32,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,32,33,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,24,8,7,6,10,14,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,26,12,11,10,9,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,2,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,32,33,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,2,6,10,14,49,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,47,16,52,28,33,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,5,6,7,56,11,46,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,5,6,7,56,11,46,15,48,31,32,33,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{37,26,12,11,56,7,55,3,2,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{39,33,32,31,30,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,8,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,5,6,7,56,11,46,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,33,32,31,30,29,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,2,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,24,26,28,33,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{42,30,14,10,6,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,24,8,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{25,9,10,11,12,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,47,16,32,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,2,6,10,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,1,5,9,10,11,12,26,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,6,5,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{37,26,12,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,2,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{42,30,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,1,2,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{44,32,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,12,26,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,1,2,3,4,22,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,4,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,10,9,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{39,33,32,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,5,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{45,33,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,3,2,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{35,22,4,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{41,29,30,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{25,9,10,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,5,6,7,8,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,47,16,52,28,33,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,6,5,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,6,5,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,2,6,10,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,4,22,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,2,6,10,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,26,24,22,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,2,6,10,14,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,10,9,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,2,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,4,22,24,26,28,33,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,33,32,31,30,29,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,24,8,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{35,22,4,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,26,24,8,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,2,6,10,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{45,33,32,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,2,6,10,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,5,6,7,8,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,12,26,24,22,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,2,6,10,14,50,13,29,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,26,24,8,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,8,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,5,6,7,8,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,3,2,6,10,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,30,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,1,2,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{42,30,14,10,9,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,47,16,12,8,4,22,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,1,2,6,10,11,12,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,26,24,8,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{41,29,30,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,3,2,6,10,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,4,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,24,8,7,6,10,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,24,26,12,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,24,26,12,11,10,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{41,29,13,9,10,11,12,8,4,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,12,8,4,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{40,29,30,31,48,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,8,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,2,6,10,11,12,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,32,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,24,26,12,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,33,32,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,29,30,31,32,33,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,8,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,26,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,26,24,22,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{41,29,30,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,47,16,52,28,33,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{42,30,29,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{37,26,12,11,10,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,4,22,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,1,5,9,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{37,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,26,12,11,10,9,5,1,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,30,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,47,16,12,8,4,22,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{37,26,12,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{44,32,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,5,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,12,26,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,2,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,2,1,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{35,22,24,26,12,11,10,9,13,29,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,30,29,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,26,12,8,4,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,29,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{41,29,13,9,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{39,33,32,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{39,33,28,26,12,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,47,16,12,8,4,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,24,26,12,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,10,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{42,30,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,8,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,33,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,33,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,10,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{45,33,32,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{35,22,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,22,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,29,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,24,22,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{25,9,10,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{39,33,32,31,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,5,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{35,22,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{35,22,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,5,1,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,10,6,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{37,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{37,26,12,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,26,12,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,10,6,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,1,5,9,10,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{41,29,13,9,10,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,10,6,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,29,30,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,4,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{45,33,32,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{42,30,14,10,6,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,2,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,8,12,11,10,9,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,24,26,12,11,10,9,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{40,29,30,31,32,33,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,5,1,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,24,26,28,52,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{40,29,30,31,32,16,12,8,4,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,47,16,32,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{35,22,4,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,49,14,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,49,14,50,13,9,5,1,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,56,7,55,3,4,22,35,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,47,16,32,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{44,32,16,52,28,26,24,22,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{41,29,13,50,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,8,12,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,32,33,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}}; 
const int nodePositions[57][3] = {{1,400,400},
{10,800,600},{11,800,800},{12,800,1000},{13,1000,400},{14,1000,600},{15,1000,800},{16,1000,1000},{17,0,400},{18,0,600},{19,0,800},{2,400,600},{20,0,1000},{21,400,0},{22,400,1200},{23,600,0},{24,600,1200},{25,800,0},{26,800,1200},{27,1000,0},{28,1000,1200},{29,1200,400},{3,400,800},{30,1200,600},{31,1200,800},{32,1200,1000},{33,1200,1200},{34,0,1200},{35,400,1600},{36,600,1600},{37,800,1600},{38,1000,1600},{39,1200,1600},{4,400,1000},{40,1200,0},{41,1600,400},{42,1600,600},{43,1600,800},{44,1600,1000},{45,1600,1200},{46,900,800},{47,1000,900},{48,1100,800},{49,1000,700},{5,600,400},{50,1000,500},{51,1000,300},{52,1000,1100},{53,1000,1300},{54,300,800},{55,500,800},
{56,700,800},{57,1300,800},{6,600,600},{7,600,800},{8,600,1000},{9,800,400}};
int timePassed[N] = {2,1,2,2,1,1,2,2,1,0,2,0,1,2,2,1,1,2,1,2,1,1,1,1,0,1,1,2,2,0,2,1,1,1,2,2,0,2,2,2,1,0,2,2,0,0,0,0,2,0,
2,0,0,0,1,0,2,1,2,2,0,2,0,1,0,0,2,0,0,0,0,0,2,2,2,1,2,2,2,2,0,2,0,0,2,1,2,0,0,0,2,2,0,2,2,0,2,0,0,2,
0,0,0,2,1,0,2,0,0,2,2,1,2,0,2,0,2,2,0,1,2,0,0,2,1,2,1,0,0,2,1,0,1,1,0,2,2,2,0,1,2,2,2,0,1,0,1,0,1,1,
2,2,2,1,2,2,2,1,2,0,0,0,0,2,2,0,2,0,1,0,0,2,0,1,0,2,1,2,0,1,0,0,0,0,0,0,2,0,0,1,0,0,1,0,0,0,0,0,2,0,
2,1,1,0,1,2,2,0,1,2,2,2,2,2,0,1,0,0,0,2,0,0,0,0,2,2,0,0,0,0,0,2,0,2,2,2,0,2,0,0,2,1,2,2,1,1,1,0,0,0,
1,2,2,2,0,2,0,0,2,2,0,0,0,2,2,2,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,1,2,2,2,1,0,2,2,2,
2,2,2,2,2,2,2,2,1,2};
int currentStartNode[N][2] = {{55,11},
{24,10},{49,9},{56,8},{29,10},{52,5},{46,7},{48,9},{49,5},{32,5},{48,9},{24,6},{52,5},{48,9},{46,7},{54,4},{48,9},{49,9},{47,5},{49,9},{48,9},{49,9},{48,9},{53,5},{46,7},{48,9},{57,4},{48,8},{46,5},{46,7},{52,7},{28,4},{49,9},{48,9},{46,5},{46,7},{15,6},{46,7},{55,11},{47,5},{47,5},{54,4},{28,10},{46,5},{16,6},{49,9},{15,6},{5,10},{56,5},{49,5},{22,4},
{26,3},{48,7},{49,7},{7,5},{10,5},{16,3},{7,3},{1,4},{56,5},{5,6},{56,5},{57,4},{33,4},{49,5},{7,3},{55,11},{15,6},{15,6},{48,7},{15,6},{28,2},{46,5},{56,5},{47,5},{49,5},{46,5},{56,5},{56,5},{56,5},{56,4},{46,5},{56,4},{56,4},{46,5},{31,3},{56,5},{56,4},{56,4},{15,6},{47,5},{48,3},{47,7},{46,5},{47,5},{33,3},{46,5},{26,3},{55,6},{55,3},{55,4},
{12,4},{15,6},{47,5},{2,3},{12,6},{55,3},{15,6},{56,4},{54,1},{54,1},{50,3},{49,5},{54,4},{46,5},{47,5},{54,1},{49,5},{47,7},{57,3},{46,5},{3,3},{15,6},{54,1},{46,5},{54,1},{46,5},{48,4},{9,3},{30,3},{53,3},{2,3},{54,4},{57,4},{11,3},{55,11},{47,5},{47,5},{7,3},{30,3},{47,5},{47,5},{47,5},{49,5},{46,5},{13,2},{46,5},{6,2},{46,5},{30,3},{57,1},
{54,1},{28,2},{54,1},{57,1},{57,1},{57,1},{54,1},{57,1},{54,3},{54,1},{28,2},{7,3},{47,5},{57,1},{54,4},{28,2},{49,5},{54,1},{57,4},{54,1},{13,2},{54,1},{57,1},{54,1},{28,2},{57,1},{13,2},{4,1},{57,1},{1,1},{57,1},{30,1},{57,1},{2,2},{15,6},{28,2},{29,1},{19,0},{19,0},{4,1},{57,1},{19,0},{7,3},{22,1},{57,1},{34,0},{41,0},{52,3},{30,2},{43,0},
{43,0},{43,0},{2,1},{43,0},{34,0},{28,2},{13,2},{19,0},{28,2},{50,3},{53,1},{41,0},{51,1},{42,0},{11,3},{19,0},{5,2},{53,3},{53,1},{43,0},{43,0},{12,2},{44,0},{51,1},{53,1},{43,0},{19,0},{19,0},{19,0},{22,1},{53,1},{43,0},{53,1},{51,1},{41,0},{32,2},{51,1},{28,2},{12,7},{34,0},{51,1},{42,0},{20,0},{53,1},{51,1},{53,1},{51,1},{45,0},{53,1},{53,1},
{34,0},{35,0},{20,0},{51,1},{36,0},{53,1},{51,1},{25,0},{39,0},{51,1},{51,1},{53,1},{35,0},{35,0},{27,0},{27,0},{27,0},{27,0},{37,0},{37,0},{38,0},{27,0},{21,0},{41,0},{27,0},{27,0},{34,0},{36,0},{45,0},{38,0},{42,0},{47,9},{18,0},{20,0},{36,0},{40,0},{38,0},{23,0},{47,7},{47,9},{16,5},{55,11},{46,7},{50,11},{48,10},{30,11},{55,11},{55,11},{46,7},{13,8},
{55,11},{50,11},{55,11},{46,7},{28,4},{49,5},{55,11},{47,5},{48,9}};
typedef int[0,nodes] node_t;

//networkEdges constains touples of the form (fromNodeId, toNodeId, lanes, edgeweight, carsOnEdge)
int networkEdges[144][6] = {{1,17,1,27,1,393},
{1,2,1,14,1,186},{1,21,1,26,0,393},{1,5,1,12,0,186},{10,11,1,12,0,179},{10,14,1,12,0,179},{10,6,1,14,1,186},{10,9,1,12,0,186},{11,10,1,14,1,179},{11,12,1,12,0,179},{11,46,2,6,0,89},{11,56,2,6,0,89},{12,11,1,12,0,179},{12,16,1,14,1,179},{12,26,1,14,1,186},{12,8,1,14,1,186},{13,29,1,12,0,179},{13,50,2,6,0,89},{13,51,2,6,0,89},{13,9,1,17,3,179},{14,10,1,12,0,179},{14,30,1,12,0,179},{14,49,2,6,0,89},{14,50,2,6,0,89},{15,46,2,6,3,79},{15,47,2,6,2,79},{15,48,2,6,3,79},{15,49,2,6,1,79},{16,12,1,15,2,179},{16,32,1,12,0,179},{16,47,2,6,0,89},{16,52,2,6,0,89},{17,1,1,26,0,393},{18,2,1,27,1,393},{19,54,2,22,7,296},{2,1,1,14,1,186},{2,18,1,26,0,393},{2,3,1,12,0,179},{2,6,1,16,2,186},{20,4,1,29,3,393},{21,1,1,27,1,393},{22,24,1,14,1,186},{22,34,1,27,1,393},{22,35,1,26,0,393},{22,4,1,12,0,186},{23,5,1,27,1,393},{24,22,1,12,0,186},{24,26,1,14,1,186},{24,36,1,27,1,393},{24,8,1,12,0,186},{25,9,1,27,1,393},
{26,12,1,12,0,186},{26,24,1,14,1,186},{26,28,1,14,1,179},{26,37,1,26,0,393},{27,51,2,22,7,296},{28,26,1,24,7,179},{28,33,1,17,3,179},{28,52,2,6,0,89},{28,53,2,6,0,89},{29,13,1,12,0,179},{29,30,1,14,1,186},{29,40,1,27,1,393},{29,41,1,26,0,393},{3,2,1,12,0,179},{3,4,1,14,1,179},{3,54,2,6,0,89},{3,55,2,6,0,89},{30,14,1,14,1,179},{30,29,1,12,0,186},{30,31,1,12,0,179},{30,42,1,30,4,393},{31,30,1,14,1,179},{31,32,1,12,0,179},{31,48,2,6,0,89},{31,57,2,6,0,89},{32,16,1,12,0,179},{32,31,1,15,2,179},{32,33,1,12,0,186},{32,44,1,26,0,393},{33,28,1,12,0,179},{33,32,1,14,1,186},{33,39,1,27,1,393},{33,45,1,26,0,393},{34,22,1,30,4,393},{35,22,1,29,3,393},{36,24,1,29,3,393},{37,26,1,28,2,393},{38,53,2,21,3,296},{39,33,1,27,1,393},{4,20,1,26,0,393},{4,22,1,12,0,186},{4,3,1,15,2,179},{4,8,1,12,0,186},{40,29,1,27,1,393},{41,29,1,29,3,393},{42,30,1,28,2,393},{43,57,2,22,8,296},{44,32,1,26,0,393},{45,33,1,27,1,393},{46,11,3,14,18,89},
{46,15,4,11,7,79},{47,15,4,16,11,79},{47,16,3,8,6,89},{48,15,4,5,1,79},{48,31,3,12,13,89},{49,14,3,9,8,89},{49,15,4,8,4,79},{5,1,1,12,0,186},{5,23,1,28,2,393},{5,6,1,12,0,186},{5,9,1,14,1,186},{50,13,3,7,3,89},{50,14,3,6,1,89},{51,13,3,11,11,89},{51,27,2,21,0,296},{52,16,3,7,3,89},{52,28,3,6,1,89},{53,28,3,11,11,89},{53,38,2,21,3,296},{54,19,2,22,6,296},{54,3,3,12,13,89},{55,3,3,11,12,89},{55,7,3,6,2,89},{56,11,3,11,12,89},{56,7,3,7,3,89},{57,31,3,12,13,89},{57,43,2,22,5,296},{6,10,1,14,1,186},{6,2,1,12,0,186},{6,5,1,12,0,186},{6,7,1,12,0,179},{7,55,2,6,1,89},{7,56,2,6,0,89},{7,6,1,19,4,179},{7,8,1,14,1,179},{8,12,1,12,0,186},{8,24,1,12,0,186},{8,4,1,12,0,186},{8,7,1,12,0,179},{9,10,1,12,0,186},{9,13,1,12,0,179},{9,25,1,26,0,393},{9,5,1,14,1,186}};

int curr_car = 0;
int uniquetest = 0;
int reroute[N];
int carDone[N];
const int horizon = 40;
int Done = 0;
int totalTravelTime = 0;

int inNodes[20][2] = {{17,0}, {18,0}, {54,19}, {20,0}, {34,0}, {35,0}, {36,0}, {37,0}, {53,38}, {39,0}, {45,0}, {44,0}, {57,43}, {42,0}, {41,0}, {40,0}, {51,27}, {25,0}, {23,0}, {21,0}};

typedef int[0, N-1] id_car;

broadcast chan Reroute, DoneRerouting;

int getEdgeIndex(int fromNode, int toNode)
{
    int k = 0;
    while(networkEdges[k][0] != fromNode || networkEdges[k][1] != toNode)
    {
        k++;
    }
    return k;
}

</declaration>
	<template>
		<name x="5" y="5">Simulator</name>
		<declaration>clock x,y;

import "lib.so" {
	int calc_edge_weight(int lanes, int cars, int lenght);
//	alias = calc_edge_weight(int lanes, int cars, int lenght);
};

void constructor()
{
    int i = 0;

    for(i = 0; i &lt; N; i++)
    {
        reroute[i] = 0;
        carDone[i] = 0;
    }
}


//check if cars have changed edge
void flow_traffic()
{
    int i = 0;
    int currentEdge = 0;
    int timePassedCarI = 0;
    int edgeTT = 0;
    int edgeId;
    int fromNode, toNode, nextToNode;  
    int fromIndex;  
    int allDone = 0;


    for (i = 0; i &lt; N; i++)
    {
        allDone += carDone[i];
        if(!carDone[i])
        {
            timePassedCarI = timePassed[i];
            
            fromNode = currentStartNode[i][0];
            fromIndex = currentStartNode[i][1];
            toNode = route[i][fromIndex+1];

            if(toNode == -1)
            {
                carDone[i] = 1;
            }
            else
            {
                edgeId = getEdgeIndex(fromNode, toNode);
        
                edgeTT = networkEdges[edgeId][3];

                if(timePassedCarI &gt;= edgeTT)
                {
                    currentStartNode[i][0] = toNode;
                    currentStartNode[i][1]++;
                    totalTravelTime += timePassedCarI;
                    timePassed[i] = 0;
                    networkEdges[edgeId][4] = networkEdges[edgeId][4] - 1;
                    nextToNode = route[i][fromIndex+2];

                    if(nextToNode != -1)
                    {
                        edgeId = getEdgeIndex(toNode, nextToNode);
                        networkEdges[edgeId][4] = networkEdges[edgeId][4] + 1;
                    }
                }
                else
                {
                    //update time passed
                    timePassed[i] += 10;
                }
            }
        }
    }

    if(allDone == N)
    {
        Done = 1;
    }

}

void update_weights()
{
    int i = 0;
    int carsOnEdge = 0;
    int toNode, fromNode;
    double newWeight = 0.0;
    
    for(i = 0; i &lt; numEdges; i++)
    {
        carsOnEdge = networkEdges[i][4];        
        networkEdges[i][3] = calc_edge_weight(networkEdges[i][2], carsOnEdge, networkEdges[i][5]);
    }
}

//TODO: ensure that cars with congested out edges are not added for rerouting
void check_reroute()
{
    int i = 0, j = 0;
    int fromIndex, nextFromNode, nextToNode;
    int edgeId;
    int weight;
    int outNode = 0;
    int threshold = 20; //TODO: find actual threshold for rerouting
    //int adj_val = 0;
    //double adj_double = 0.0;

    for(i = 0; i &lt; N; i++)
    {
        if(!carDone[i])
        {
            //adj_val = 0;
            //adj_double = 0.0;
            j = 0;
            outNode = 0;
            fromIndex = currentStartNode[i][1];

            if(route[i][fromIndex+3] != -1)
            {
            nextFromNode = route[i][fromIndex+1];
            nextToNode = route[i][fromIndex+2];
            for(j = 0; j &lt; 20; j++)
            {
                if(nextToNode == inNodes[j][0] || nextToNode == inNodes[j][1])
                {
                    outNode = 1;
                }
            }
            edgeId = getEdgeIndex(nextFromNode, nextToNode);

            weight = networkEdges[edgeId][3];

            //doubles in uppaal?
            //adj_double = round(threshold * (networkEdges[edgeId][5]/100));
            //adj_val = fint(adj_double);

            if(weight &gt; threshold &amp;&amp; outNode == 0)
            {
                reroute[i] = 1;
            }
            }
        }
      
    }
       
}</declaration>
		<location id="id0" x="-501" y="-246">
			<label kind="invariant" x="-511" y="-229">y &lt;= 10</label>
		</location>
		<location id="id1" x="-773" y="-433">
			<name x="-783" y="-467">Init</name>
			<committed/>
		</location>
		<location id="id2" x="-501" y="-433">
			<urgent/>
		</location>
		<location id="id3" x="-264" y="-433">
			<urgent/>
		</location>
		<location id="id4" x="34" y="-433">
			<name x="24" y="-467">End</name>
		</location>
		<location id="id5" x="-179" y="-305">
			<urgent/>
		</location>
		<init ref="id1"/>
		<transition controllable="false">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="-484" y="-314">y == 10</label>
			<label kind="assignment" x="-501" y="-339">flow_traffic(), update_weights(), y = 0</label>
		</transition>
		<transition controllable="false">
			<source ref="id5"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-306" y="-212">DoneRerouting?</label>
			<nail x="-179" y="-246"/>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="guard" x="-162" y="-390">x &lt; horizon &amp;&amp; Done == 0</label>
			<label kind="synchronisation" x="-162" y="-373">Reroute!</label>
			<nail x="-179" y="-373"/>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-221" y="-458">x &gt;= horizon || Done == 1</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="assignment" x="-450" y="-458">check_reroute()</label>
		</transition>
		<transition controllable="false">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="assignment" x="-697" y="-458">constructor()</label>
		</transition>
	</template>
	<template>
		<name>Rerouter</name>
		<declaration>int connectingNodes[3];

void getConnectingNodes(int node, int prevNode)
{
    int i = 0;
    int foundNodes = 0;
    int edge[6];
    connectingNodes[0] = -1;
    connectingNodes[1] = -1;
    connectingNodes[2] = -1;

    for(i = 0; i &lt; numEdges; i++)
    {
        edge = networkEdges[i];
        if(edge[0] == node &amp;&amp; edge[1] != prevNode)
        {
            connectingNodes[foundNodes] = edge[1];
            foundNodes++;
        }
    }

}

int manhattanDistance(int node1, int node2)
{
    int i = 0, j = 0;

    while(node1 != nodePositions[i][0])
    {
        i++;
    }
    while(node2 != nodePositions[j][0])
    {
        j++;
    }

    return abs(nodePositions[i][1] - nodePositions[j][1]) + abs(nodePositions[i][2] - nodePositions[j][2]);
}

void simpleReroute()
{
    int carRoute[routeLenght] = route[curr_car];
    int i = 0, j = 0, k = 0;
    int destNode;
    int curNode = currentStartNode[curr_car][0];
    int curIndex = currentStartNode[curr_car][1];
    int edgeWeights[3];
    int prevNode = curNode;
    int rerouteNode;
    int edgeId, edgeWeight, bestConnection;
    int test[1];
    int illegalInNode = 0;


    i = curIndex;
    while (carRoute[i+1] != -1)
    {            
        i++;
    }

    destNode = carRoute[i];
    if (curNode != destNode)
    {
        curIndex++;
        rerouteNode = route[curr_car][curIndex];

        while (rerouteNode != destNode)
        {
            edgeId = 0;
            edgeWeight = 0; 
            j = 0;
            bestConnection = 0;

            getConnectingNodes(rerouteNode, prevNode);
        
            for (j = 0; j &lt; 3; j++)
            {   
                if(connectingNodes[j] != -1)
                {
                    edgeId = getEdgeIndex(rerouteNode, connectingNodes[j]);

                    edgeWeight = networkEdges[edgeId][3];

                    edgeWeights[j] = manhattanDistance(connectingNodes[j], destNode);

                    for(k = 0; k &lt; 20; k++)
                    {
                        if(connectingNodes[j] == inNodes[k][0] &amp;&amp; inNodes[k][0] != destNode &amp;&amp; inNodes[k][1] != destNode)
                        {
                            illegalInNode = 1;
                        }
                    }

                    if(illegalInNode == 1)
                    {
                        edgeWeights[j] = 32000;
                    }            
                    if( edgeWeights[j] &lt;  edgeWeights[bestConnection])
                    {
                        bestConnection = j;
                    }
                    illegalInNode = 0;
                }
            } 
        
            carRoute[curIndex + 1] = connectingNodes[bestConnection];
            prevNode = rerouteNode;
            rerouteNode = connectingNodes[bestConnection];
            curIndex++;        
        }

        while(curIndex &lt; (routeLenght-1))
        {
            carRoute[curIndex+1] = -1;
            curIndex++;
        }         

        route[curr_car] = carRoute;

    }
    
}

void choose_route(int strategy)
{
    if(!carDone[curr_car])
    {
        reroute[curr_car] = 0;   
    
        if(strategy == 1)
        {
            simpleReroute();
        }
        else if (strategy == 0)
        {
            //Keep current route
        }
    }

}</declaration>
		<location id="id6" x="-909" y="-195">
		</location>
		<location id="id7" x="-714" y="-195">
			<urgent/>
		</location>
		<location id="id8" x="-510" y="-195">
			<urgent/>
		</location>
		<location id="id9" x="-314" y="-289">
			<urgent/>
		</location>
		<location id="id10" x="-314" y="-110">
			<urgent/>
		</location>
		<location id="id11" x="-110" y="-195">
			<urgent/>
		</location>
		<location id="id12" x="59" y="-195">
			<committed/>
		</location>
		<init ref="id6"/>
		<transition controllable="false">
			<source ref="id7"/>
			<target ref="id11"/>
			<label kind="guard" x="-696" y="-416">reroute[curr_car] == 0</label>
			<nail x="-714" y="-382"/>
			<nail x="-110" y="-382"/>
		</transition>
		<transition controllable="false">
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="guard" x="-696" y="-229">reroute[curr_car] == 1</label>
		</transition>
		<transition controllable="false">
			<source ref="id12"/>
			<target ref="id6"/>
			<label kind="assignment" x="-408" y="85">curr_car = 0</label>
			<nail x="59" y="76"/>
			<nail x="-909" y="76"/>
		</transition>
		<transition controllable="false">
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="guard" x="-68" y="-221">curr_car &gt;= (N-1)</label>
			<label kind="synchronisation" x="-76" y="-238">DoneRerouting!</label>
		</transition>
		<transition controllable="false">
			<source ref="id11"/>
			<target ref="id7"/>
			<label kind="guard" x="-450" y="8">curr_car &lt; (N-1)</label>
			<label kind="assignment" x="-450" y="-17">curr_car++</label>
			<nail x="-110" y="-25"/>
			<nail x="-714" y="-25"/>
		</transition>
		<transition controllable="false">
			<source ref="id9"/>
			<target ref="id11"/>
		</transition>
		<transition controllable="false">
			<source ref="id10"/>
			<target ref="id11"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id10"/>
			<label kind="assignment" x="-501" y="-127">choose_route(1)</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="assignment" x="-501" y="-280">choose_route(0)</label>
		</transition>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-841" y="-221">Reroute?</label>
		</transition>
	</template>
	<system>// Place template instantiations here.


// List one or more processes to be composed into a system.
system Simulator, Rerouter;
    </system>
	<queries>
		<query>
			<formula>E&lt;&gt; Simulator.End</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy Opt =minE (totalTravelTime) [&lt;=horizon]: &lt;&gt; Simulator.End</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
