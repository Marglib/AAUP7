<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int routeLenght = 25;
const int max = 16000;
const int nodes = //HOLDER_NUMBER_OF_NODES
const int numEdges = //HOLDER_NUMBER_OF_EDGES
//HOLDER_NUMBER_OF_CARS
const int pid[N] = //HOLDER_CAR_PID 
int route[N][routeLenght] = //HOLDER_CAR_ROUTE 
int newRoute[N][routeLenght] = //HOLDER_NEW_ROUTE 
//HOLDER_NODE_POSITIONS
int timePassed[N] = //HOLDER_TIME_PASSED
int currentStartNode[N][2] = //HOLDER_CURRENT_START_NODE
int cost[nodes][nodes] = //HOLDER_ADJACENCY_MATRIX
typedef int[0,nodes] node_t;

int travelHist[N][2]; 
//Hard coded in nodes
int inNodes[20][2] = {{17,0}, {18,0}, {54,19}, {20,0}, {34,0}, {35,0}, {36,0}, {37,0}, {53,38}, {39,0}, {45,0}, {44,0}, {57,43}, {42,0}, {41,0}, {40,0}, {51,27}, {25,0}, {23,0}, {21,0}};

//networkEdges constains touples of the form (fromNodeId, toNodeId, lanes, edgeweight, carsOnEdge)
//HOLDER_EDGES

int curr_car = 0;
int uniquetest = 0;
int reroute[N] = //HOLDER_REROUTE
int carDone[N];
const int horizon = 40;
int Done = 0;
double rerouteTime = 0.0;
/*const int INT32_MAX = 2147483647;
typedef int[0, INT32_MAX] int32_t;
int32_t totalTravelTime = 0;
*/
double totalTravelTime = 0.0;

typedef int[0, N-1] id_car;

broadcast chan Reroute, DoneRerouting;

int getEdgeIndex(int fromNode, int toNode)
{
    int k = 0;
    while(networkEdges[k][0] != fromNode || networkEdges[k][1] != toNode)
    {
        k++;
        if(k == numEdges)
        {
            return -1;
        }
    }
    return k;
}

</declaration>
	<template>
		<name x="5" y="5">Simulator</name>
		<declaration>clock x,y;
// needs abosolute path to be used in tempmodel
///home/thomas/AAUP7/UppaalModels/Libraries/lib.so

import "/Libraries/lib.so" {
	int calc_edge_weight(int lanes, int cars, int lenght);
	//alias = int calc_edge_weight(int lanes, int cars, int lenght);
};

void constructor()
{
    int i = 0;

    for(i = 0; i &lt; N; i++)
    {
        carDone[i] = 0;
        travelHist[i][0] = 0; 
        travelHist[i][1] = 0; 
    }
}


//check if cars have changed edge
void flow_traffic()
{
    int i = 0;
    int currentEdge = 0;
    int timePassedCarI = 0;
    int edgeTT = 0;
    int edgeId;
    int fromNode, toNode, nextToNode;  
    int fromIndex;  
    int allDone = 0;


    for (i = 0; i &lt; N; i++)
    {
        allDone += carDone[i];
        if(!carDone[i])
        {
            timePassedCarI = timePassed[i];
            
            fromNode = currentStartNode[i][0];
            fromIndex = currentStartNode[i][1];
            toNode = route[i][fromIndex+1];

            if(toNode == -1)
            {
                carDone[i] = 1;
            }
            else
            {
                edgeId = getEdgeIndex(fromNode, toNode);
        
                edgeTT = networkEdges[edgeId][3];

                if(timePassedCarI &gt;= edgeTT)
                {
                    currentStartNode[i][0] = toNode;
                    currentStartNode[i][1]++;
                    //totalTravelTime = totalTravelTime + (timePassedCarI/100);
                    timePassed[i] = 0;
                    networkEdges[edgeId][4] = networkEdges[edgeId][4] - 1;
                    nextToNode = route[i][fromIndex+2];

                    if(nextToNode != -1)
                    {
                        edgeId = getEdgeIndex(toNode, nextToNode);
                        networkEdges[edgeId][4] = networkEdges[edgeId][4] + 1;
                        travelHist[i][0] += 1;
                        travelHist[i][1] += networkEdges[edgeId][3];
                    }
                }
                else
                {
                    //update time passed
                    timePassed[i] += 10;
                }
            }
        }
    }

    if(allDone == N)
    {
        Done = 1;
    }

}

void update_weights()
{
    int i = 0;
    int carsOnEdge = 0;
    
    for(i = 0; i &lt; numEdges; i++)
    {
        carsOnEdge = networkEdges[i][4];        
        networkEdges[i][3] = calc_edge_weight(networkEdges[i][2], carsOnEdge, networkEdges[i][5]);
    }
}

void get_routing_result()
{
    int i = 0;
    int avgEdgeTT;

    for(i = 0; i &lt; N; i++)
    {
        if(travelHist[i][0] == 0)
        {
            avgEdgeTT = 0;
        }
        else
        {
            avgEdgeTT = (travelHist[i][1] / travelHist[i][0]);
        }
        
        totalTravelTime = totalTravelTime + (avgEdgeTT/10); 
    }

}</declaration>
		<location id="id0" x="-561" y="-552">
			<name x="-612" y="-586">SimulateTraffic</name>
			<label kind="invariant" x="-646" y="-611">y &lt;= 10 &amp;&amp; x &lt;= horizon</label>
		</location>
		<location id="id1" x="-986" y="-552">
			<name x="-996" y="-586">Init</name>
			<committed/>
		</location>
		<location id="id2" x="-850" y="-552">
			<name x="-892" y="-586">Constructed</name>
			<urgent/>
		</location>
		<location id="id3" x="-349" y="-552">
			<name x="-359" y="-586">End</name>
		</location>
		<location id="id4" x="-723" y="-552">
			<name x="-765" y="-586">RerouteWait</name>
			<urgent/>
		</location>
		<init ref="id1"/>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-824" y="-543">Reroute!</label>
		</transition>
		<transition controllable="false">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-535" y="-433">y == 10 &amp;&amp; x &lt; horizon</label>
			<label kind="assignment" x="-671" y="-433">flow_traffic(), 
update_weights(),
y = 0</label>
			<nail x="-647" y="-437"/>
			<nail x="-469" y="-437"/>
		</transition>
		<transition controllable="false">
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="guard" x="-510" y="-535">x == horizon || Done == 1</label>
			<label kind="assignment" x="-510" y="-552">get_routing_result()</label>
		</transition>
		<transition controllable="false">
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-705" y="-543">DoneRerouting?</label>
		</transition>
		<transition controllable="false">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="assignment" x="-969" y="-543">constructor()</label>
		</transition>
	</template>
	<template>
		<name>Rerouter</name>
		<declaration>void dijkstra()
{
    int carRoute[routeLenght] = route[curr_car];
    int suggestedRoute[routeLenght];
    int selected[nodes], dist[nodes], prev[nodes];
    int i = 0, min, m , d, j;
    int destNode;
    int curNode;
    int curIndex = currentStartNode[curr_car][1];
    int rerouteNode;

    for (i = 0; i &lt; nodes; i++)
    {
        selected[i] = 0;
        dist[i] = max;
        prev[i] = -1;
    }

    i = curIndex;
    while (carRoute[i+1] != -1)
    {            
        i++;
    }

    destNode = carRoute[i];


    curIndex++;
    curNode = carRoute[curIndex];
    //Subtract 1 from curNode and destNode to make it work with the 0 indexed arrays
    curNode--;
    destNode--;
    rerouteNode = curNode;
    selected[rerouteNode] = 1;
    dist[rerouteNode] = 0;

    while(selected[destNode] == 0)
    {
        min = max;
        m = 0;
        for(i = 0; i &lt; nodes; i++)
        {
            d = dist[rerouteNode] + cost[rerouteNode][i];
            if(d &lt; dist[i] &amp;&amp; selected[i] == 0)
            {
                dist[i] = d;
                prev[i] = rerouteNode;
            }
            if(min &gt; dist[i] &amp;&amp; selected[i] == 0)
            {
                min = dist[i];
                m = i;
            }
        }
        rerouteNode = m;
        selected[rerouteNode] = 1;    
    }

    rerouteNode = destNode;
    j = 0;

    while (rerouteNode != curNode)
    {
        //Add 1 to rerouteNode to convert it back to our node numbers
        rerouteNode++;
        suggestedRoute[j] = rerouteNode;
        rerouteNode = prev[(rerouteNode -1)];
        j++;        
    }

    
    while (j &gt; 0)
    {
        j--;
        carRoute[curIndex+1] = suggestedRoute[j];
        curIndex++;        
    }

    while(curIndex &lt; (routeLenght-1))
    {
        carRoute[curIndex+1] = -1;
        curIndex++;
    }         

    newRoute[curr_car] = carRoute;

}






void choose_route()
{
    if(!carDone[curr_car])
    {
        reroute[curr_car] = 0;   

        dijkstra();
    }
                
}</declaration>
		<location id="id5" x="-909" y="-195">
			<name x="-918" y="-187">Init</name>
		</location>
		<location id="id6" x="-748" y="-195">
			<name x="-799" y="-187">Called</name>
			<urgent/>
		</location>
		<location id="id7" x="-544" y="-195">
			<name x="-535" y="-221">Rerouting</name>
			<urgent/>
		</location>
		<location id="id8" x="-544" y="-297">
			<name x="-586" y="-331">DoReroute</name>
			<urgent/>
		</location>
		<location id="id9" x="-195" y="-102">
			<name x="-229" y="-93">NoReroute</name>
			<urgent/>
		</location>
		<location id="id10" x="-110" y="-195">
			<name x="-102" y="-187">CarDone</name>
			<urgent/>
		</location>
		<location id="id11" x="93" y="-195">
			<name x="51" y="-187">SimulatorSync</name>
			<urgent/>
		</location>
		<location id="id12" x="-204" y="-297">
			<name x="-246" y="-331">RejectRoute</name>
			<urgent/>
		</location>
		<location id="id13" x="-416" y="-195">
			<name x="-459" y="-187">AcceptRoute</name>
			<urgent/>
		</location>
		<location id="id14" x="187" y="-195">
			<name x="170" y="-187">Done</name>
		</location>
		<location id="id15" x="-110" y="-433">
			<name x="-153" y="-467">RoadClosed</name>
			<urgent/>
		</location>
		<branchpoint id="id16" x="-416" y="-297">
		</branchpoint>
		<init ref="id5"/>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id15"/>
			<label kind="guard" x="-467" y="-459">reroute[curr_car] == 2</label>
			<label kind="assignment" x="-467" y="-476">choose_route()</label>
			<nail x="-748" y="-433"/>
		</transition>
		<transition controllable="false">
			<source ref="id15"/>
			<target ref="id10"/>
			<label kind="assignment" x="-102" y="-408">route[curr_car] = newRoute[curr_car]</label>
		</transition>
		<transition controllable="false">
			<source ref="id11"/>
			<target ref="id14"/>
		</transition>
		<transition controllable="false">
			<source ref="id12"/>
			<target ref="id10"/>
		</transition>
		<transition controllable="false">
			<source ref="id13"/>
			<target ref="id10"/>
			<label kind="assignment" x="-391" y="-221">route[curr_car] = newRoute[curr_car]</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id13"/>
			<label kind="probability" x="-408" y="-289">9</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id12"/>
			<label kind="probability" x="-399" y="-323">1</label>
		</transition>
		<transition controllable="false">
			<source ref="id8"/>
			<target ref="id16"/>
			<label kind="assignment" x="-527" y="-289">choose_route()</label>
		</transition>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id10"/>
			<label kind="guard" x="-467" y="-391">reroute[curr_car] == 0</label>
			<nail x="-680" y="-365"/>
			<nail x="-110" y="-365"/>
		</transition>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-714" y="-221">reroute[curr_car] == 1</label>
		</transition>
		<transition controllable="false">
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="guard" x="-68" y="-238">curr_car &gt;= (N-1)</label>
			<label kind="synchronisation" x="-68" y="-221">DoneRerouting!</label>
		</transition>
		<transition controllable="false">
			<source ref="id10"/>
			<target ref="id6"/>
			<label kind="guard" x="-450" y="-8">curr_car &lt; (N-1)</label>
			<label kind="assignment" x="-450" y="-25">curr_car++</label>
			<nail x="-110" y="-25"/>
			<nail x="-748" y="-25"/>
		</transition>
		<transition controllable="false">
			<source ref="id9"/>
			<target ref="id10"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id9"/>
			<nail x="-544" y="-102"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
		</transition>
		<transition controllable="false">
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-867" y="-221">Reroute?</label>
		</transition>
	</template>
	<system>// Place template instantiations here.


// List one or more processes to be composed into a system.
system Simulator, Rerouter;
    </system>
	<queries>
		<query>
			<formula>E&lt;&gt; Simulator.End</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy Opt =minE (totalTravelTime) [&lt;=horizon]: &lt;&gt; Simulator.End</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
