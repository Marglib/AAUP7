<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int nodes = 57; //number of nodes in the network
//HOLDER_NUMBER_OF_CARS
const int pid[N] = //HOLDER_CAR_PID 
const int route[N][nodes] = //HOLDER_CAR_ROUTE 

int edges[120][2]; //could not assign values to array when it had type double

int currentCar = 0;

typedef int[0, N-1] id_car;

chan Reroute[N], RouteSet;</declaration>
	<template>
		<name x="5" y="5">Controller</name>
		<declaration>// Place local declarations here.

int firstIntermediateNode = 46;
int edgeIds[120];
int networkEdges[60][2] = {{21,1}, {17,1}, {1,2},{18,2},{2,3},{19,3},{3,4},{20,4},{4,22},{34,22},{22,35},{23,5},{1,5},{5,6},{2,6},{6,7},{3,7},{7,8},
                            {4,8},{8,24},{22,24},{24,36},{25,9},{5,9},{9,10},{6,10},{10,11},{7,11},{11,12},{8,12},{12,26},{24,26},{26,37},{27,13},
                            {9,13},{13,14},{10,14},{14,15},{11,15},{15,16},{12,16},{16,28},{26,28},{28,38},{40,29},{13,29},{29,30},{14,30},{30,31},
                            {15,31},{31,32},{16,32},{32,33},{28,33},{33,39},{29,41},{30,42},{31,43},{32,44},{33,45}};
int CarDone = 0;
int AllCarsDone = 0;
int RerouteCar = 0;
int uniquetest = 0;

int NodesToUniqueInt(int fromNode, int toNode)
{
    int x = 0;
    if (fromNode &gt;= toNode)
    {
        x = fromNode * fromNode + fromNode + toNode;
    }
    else
    {
        x = fromNode + toNode * toNode;
    }
    return x;
}

int GetEdgeId(int fromNode, int toNode)
{
    int unique = NodesToUniqueInt(fromNode, toNode);
    int i = 0;
    uniquetest = unique;
    while(i &lt; 119 &amp;&amp; unique != edgeIds[i])
    {
        i++;
    }
    return i;
}

void Constructor()
{
    int i;
    for(i = 0; i &lt; 60; i++)
    {
        edgeIds[i] = NodesToUniqueInt(networkEdges[i][0], networkEdges[i][1]);
        edgeIds[60+i] = NodesToUniqueInt(networkEdges[i][1], networkEdges[i][0]);
    }

    for(i = 0; i &lt; 120; i++)
    {
        edges[i][1] = 10; 
    }
}

void CheckReroute()
{
    int carRoute[nodes] = route[currentCar];
    int i = 0;

    while (carRoute[i+1] != -1 &amp;&amp; RerouteCar == 0)
    {
        int fromNode = carRoute[i];
        int toNode = carRoute[i+1];
        int edgeId = 0;
        int edgeWeight = 0;
        int edgeCriticalWeight = 0;
        

        // ensure that the nodes are not intermediate nodes
        if(fromNode &gt;= firstIntermediateNode)
        {
            fromNode = carRoute[i-1];
        }

        if(toNode &gt;= firstIntermediateNode)
        {
            toNode = carRoute[i+1];
        }

        edgeId = GetEdgeId(fromNode, toNode);

        edgeWeight = edges[edgeId][0];
        edgeCriticalWeight = edges[edgeId][1];

        if(edgeWeight &gt; edgeCriticalWeight)
        {
            RerouteCar = 1;
        }

        i++;
    }


}

void AddRouteWeight() 
{
    int carRoute[nodes] = route[currentCar];
    int i = 0;

    while (carRoute[i+1] != -1)
    {
        int fromNode = carRoute[i];
        int toNode = carRoute[i+1];
        int edgeId = 0;        

        // ensure that the nodes are not intermediate nodes
        if(fromNode &gt;= firstIntermediateNode)
        {
            fromNode = carRoute[i-1];
        }

        if(toNode &gt;= firstIntermediateNode)
        {
            toNode = carRoute[i+1];
        }

        edgeId = GetEdgeId(fromNode, toNode);

        edges[edgeId][0] += 1 ;

        i++;
    }

    if(currentCar == (N-1))
    {
        AllCarsDone = 1;
    }

}</declaration>
		<location id="id0" x="-909" y="-187">
			<name x="-919" y="-221">InitSate</name>
		</location>
		<location id="id1" x="-748" y="-187">
			<name x="-758" y="-221">GetRoute</name>
		</location>
		<location id="id2" x="-323" y="-187">
			<name x="-333" y="-221">UpdateWeights</name>
		</location>
		<location id="id3" x="-93" y="-187">
			<name x="-153" y="-221">CheckDone</name>
		</location>
		<location id="id4" x="187" y="-187">
			<name x="177" y="-221">End</name>
		</location>
		<location id="id5" x="-586" y="-187">
		</location>
		<location id="id6" x="-467" y="-289">
			<name x="-501" y="-323">Rerouting</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id5"/>
			<target ref="id2"/>
			<label kind="guard" x="-518" y="-178">RerouteCar == 0</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-408" y="-272">RouteSet?</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="guard" x="-663" y="-289">RerouteCar == 1</label>
			<label kind="synchronisation" x="-680" y="-272">Reroute[currentCar]!</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id5"/>
			<label kind="assignment" x="-730" y="-187">CheckReroute()</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-85" y="-161">CarDone == 1 &amp;&amp; AllCarsDone == 1</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="-561" y="-8">CarDone == 1 &amp;&amp; AllCarsDone == 0</label>
			<label kind="assignment" x="-493" y="25">currentCar++,
CarDone = 0</label>
			<nail x="-93" y="17"/>
			<nail x="-748" y="17"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="assignment" x="-272" y="-178">CarDone = 1,
RerouteCar = 0,
AddRouteWeight()</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-891" y="-187">Constructor()</label>
		</transition>
	</template>
	<template>
		<name>Rerouter</name>
		<declaration>
void ChooseRoute()
{
    int carRoute[nodes] = route[currentCar];


}</declaration>
		<location id="id7" x="-450" y="-59">
			<name x="-460" y="-93">InitState</name>
		</location>
		<location id="id8" x="-280" y="-59">
			<name x="-331" y="-93">ComputeRoute</name>
		</location>
		<location id="id9" x="-119" y="-59">
			<name x="-129" y="-93">SetRoute</name>
		</location>
		<location id="id10" x="25" y="-59">
			<name x="15" y="-93">Done</name>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id10"/>
			<target ref="id8"/>
			<label kind="select" x="-255" y="51">id : id_car</label>
			<label kind="synchronisation" x="-178" y="51">Reroute[id]?</label>
			<nail x="25" y="76"/>
			<nail x="-280" y="76"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-85" y="-42">RouteSet!</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="assignment" x="-255" y="-51">ChooseRoute()</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="select" x="-433" y="-17">id : id_car</label>
			<label kind="synchronisation" x="-442" y="-42">Reroute[id]?</label>
		</transition>
	</template>
	<system>// Place template instantiations here.




// List one or more processes to be composed into a system.
//Rerouters(int[0,N-1] id) = Rerouter(id);

system Controller, Rerouter;
    </system>
	<queries>
		<query>
			<formula>E&lt;&gt; Controller.End</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
