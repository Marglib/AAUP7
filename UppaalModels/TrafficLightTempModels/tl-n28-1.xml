<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
//align with sumo model
//                                              North
//                				      	|	     |	       |
// 				                        |	B2   |	       |
//                     				 	|	 |   |	       |
//                     					|	 v   | 	       |
// --------------------------------------                  ------------------------------------- 
//                                                                        D13
//                                                              A2  ^&lt;............... 
//                                                    
//                                                          ---------------------------------------      
//                                                                   v---------     D12        
//
// --------------------------------------                  ---------------------------------------
// 		   		      D5           ^     	     critical Cij i,j \in {1,...,8}
//    	 straight     A1  .........
// West	--------------------------------    							East
//                    D3
// 	                    -----------&gt;v    		     .
// -------------------------------------|	     |	  ^    |------------------------------------
//                				      	|	     |	  |    |
// 				                        |	     |	  B1   |
//                     				 	|	     |	       |
//                     					|	     | 	       |
// 					                             South

//we consider 6 signals (name,id)  (A1_0,1) (A1_1,2) (A2_0,3) (A2_1,4) (B1,5) (B2,6)
int totalJammedCars = 0;
int curStep = 0;
clock x;


//CONSTANTS - SOME are replaced with variables
const int NrOfSignals = 8;
//const int NrOfSignalConfs = 2*2*2*2*2*2*2*2-1; //2^NS 
const int NrOfMaxCompSignalConfs = 2; 
const int YELLOW = 8;
const int Horizon = 20; //20 step simulations = 20 secs 
const int stepsToCross = 1; // a car needs to steps (2secs) to cross in average
const int deconstructJamRate = 1;
const int MAX_GREEN = 120;
const int UINT16_MAX    =  65535;
int checkGreenTimer = 0;


//TYPES
typedef int[0,UINT16_MAX] signal_conf_t;
typedef int[1,NrOfSignals] signal_t;
typedef int[0,NrOfMaxCompSignalConfs-1] max_signal_conf_t;
typedef int[4,9] del_choice_t; //this means delay \in [MIN_GREEN*delay_multiplier,9*delay]

broadcast chan green[max_signal_conf_t];
broadcast chan yellow[max_signal_conf_t];
broadcast chan red[max_signal_conf_t];


const signal_conf_t maximal_comp_comb[max_signal_conf_t] = {
238,17
};


//ON THE FLY ARGUMENTS
//signal should be updated on the fly
bool signal[signal_t] = {
false,false,false,false,false,false,false,false
};

//this is the current state of the system, we let if flow for MIN_GREEN




//to replace by python script
//const max_signal_conf_t initialPhase = 1; 
//int carsAreal[signal_t] = {0,  0,  0,  0, 1, 2};
//int carsJammed[signal_t] = {0,  0, 0, 0, 0,  0};
//const int firstDelay = MIN_GREEN;
//int greenTimer = 10;
 
//PLACE HOLDERS
const max_signal_conf_t initialPhase = 0;
int greenTimer = 15;
int carsAreal[signal_t] = {1, 0, 0, 0, 4, 0, 1, 2};
int carsJammed[signal_t] = {1, 0, 0, 0, 2, 0, 0, 0};
//first delay is dinamic in contrast to the 15 min for the floor heating, a yellow phase has to follow. i.e. fd = delay + yellow
//HOLDER_FIRST_DELAY
//SIM_STEP=507</declaration>
	<template>
		<name x="5" y="5">trafficLights</name>
		<declaration>// Place local declarations here.
clock x;


void selectPhase(max_signal_conf_t ms_conf) {
  signal_conf_t s_conf = maximal_comp_comb[ms_conf];  
  for (i:signal_t)    {
      signal[i] = (s_conf &amp; (1&lt;&lt;(i-1)))==(1&lt;&lt;(i-1));
  }
}

void complementPhase(max_signal_conf_t ms_conf) {
    if (ms_conf == 0)
        selectPhase(1);
    if (ms_conf == 1)
        selectPhase(0);
}


void initialize() {
    selectPhase(initialPhase);

    for (i:signal_t) {
        if(signal[i] &amp;&amp; carsAreal[i]==0){
            checkGreenTimer = 1;
        }
    } 
    if(checkGreenTimer){
        greenTimer = 0;
    }
    
    //if (signal[1] &amp;&amp; carsAreal[5]==0 &amp;&amp; carsAreal[6]==0)
    //    greenTimer = 0;        
    //if (signal[5] &amp;&amp; carsAreal[1]==0 &amp;&amp; carsAreal[2]==0 &amp;&amp; carsAreal[3]==0 &amp;&amp; carsAreal[4]==0)
    //    greenTimer = 0;        
}


void normalize() {
    for (i:signal_t) {
        if (carsJammed[i] &lt; 0)
            carsJammed[i] = 0;
    }
}

void flow(int delaySteps) {
    int carsPassed = 0;
    int stepCounter = 0;
    int incCars = 0;
    const int upperStep = curStep + delaySteps;
    int j;
    for (j=curStep; j&lt;upperStep; j++) {
        if (stepCounter &gt; stepsToCross) {
            carsPassed = 1;
            stepCounter = 0;
        }        
        for (i:signal_t)    {
            if (signal[i]) {
                if (carsJammed[i]&gt;0)   
                    carsJammed[i] = carsJammed[i] - carsPassed;    
            }
            totalJammedCars = totalJammedCars + carsJammed[i];
          }
        curStep++;
        stepCounter++;        
    }    
    // do something like if enabled carsPassing = carsPassing - carsPassed + incomming(i) otherwise carsPassing = carsPassing + incomming(i) keep value &gt;= 0
    // for carsJammed do if not enabled carsJammed = carsJammed + incomming(i,timetojam!) if enabled carsJammed = 0
}


void goYellow(int delaySteps) {
    const int upperStep = curStep + delaySteps;
    int j;
    complementPhase(initialPhase);
    for (i:signal_t) {
        carsJammed[i] = carsJammed[i] + carsAreal[i]; 
        carsAreal[i] = 0;       
    }
    for (j=curStep; j&lt;=upperStep; j++) {
        for (i:signal_t) {
            totalJammedCars = totalJammedCars + carsJammed[i];
        }    
        curStep++;
    }    
}

void goGreen() {
    for (i:signal_t) {
        if (signal[i]) {
            carsAreal[i] = 0;
        }
        carsJammed[i] = carsJammed[i] + carsAreal[i]; 
        carsAreal[i] = 0;
    }
}

  
void resetUnneeded() {
//    delchoice = 0;
    curStep = 0;
    totalJammedCars = 0;
    for (i:signal_t) {
        //units[i] = 0.0;
        //signal[i] = false;
    }    
}
</declaration>
		<location id="id0" x="-220" y="0">
			<urgent/>
		</location>
		<location id="id1" x="34" y="0">
			<name x="51" y="-8">Yellow</name>
			<label kind="invariant" x="24" y="17">x &lt;= 8</label>
		</location>
		<location id="id2" x="34" y="153">
			<name x="17" y="119">GreenAgain</name>
			<label kind="invariant" x="8" y="178">x &lt;= 5</label>
		</location>
		<location id="id3" x="-331" y="0">
			<urgent/>
		</location>
		<location id="id4" x="34" y="-102">
			<name x="8" y="-144">Green</name>
			<label kind="invariant" x="0" y="-127">x &lt;= 8</label>
		</location>
		<location id="id5" x="-331" y="152">
			<name x="-340" y="169">DONE</name>
		</location>
		<location id="id6" x="-739" y="-272">
			<name x="-773" y="-255">__RESET__</name>
		</location>
		<init ref="id3"/>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="assignment" x="-773" y="-408">resetUnneeded()</label>
			<nail x="-781" y="-382"/>
			<nail x="-688" y="-382"/>
		</transition>
		<transition controllable="false">
			<source ref="id0"/>
			<target ref="id5"/>
			<label kind="guard" x="-357" y="51">curStep &gt;= Horizon</label>
		</transition>
		<transition controllable="false">
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="42" y="-68">x &gt;= 8</label>
			<label kind="assignment" x="42" y="-51">x = 0</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="-144" y="144">x &gt;= 5</label>
			<label kind="assignment" x="-144" y="161">flow(5),
x = 0</label>
			<nail x="34" y="178"/>
			<nail x="-221" y="177"/>
		</transition>
		<transition controllable="false">
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="guard" x="-136" y="-110">x &gt;= 8</label>
			<label kind="assignment" x="-136" y="-93">flow(8), 
x = 0</label>
			<nail x="8" y="-102"/>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="assignment" x="-306" y="-25">initialize()</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="-153" y="59">curStep &lt; Horizon &amp;&amp;
greenTimer &lt; MAX_GREEN</label>
			<label kind="assignment" x="-153" y="93">goGreen()</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-127" y="-17">curStep &lt; Horizon</label>
			<label kind="assignment" x="-110" y="0">goYellow(8),
greenTimer = 0</label>
		</transition>
	</template>
	<system>
// List one or more processes to be composed into a system.
system trafficLights;
    </system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy Opt =minE (totalJammedCars) [&lt;=2*Horizon]: &lt;&gt; trafficLights.DONE</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=Horizon] { signal[1], 2+signal[2], 4+signal[3], 6+signal[4], 8+signal[5], 10+signal[6] } under Opt</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
