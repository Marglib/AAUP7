<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int routeLenght = 25;
const int nodes = 57;
const int numEdges = 144;
const int N = 248;

const int pid[N] = {1000,
1001,1010,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1011,1110,1111,1112,1113,1114,1116,1117,1118,1119,1012,1120,1122,1123,1124,1125,1126,1127,1128,1129,1013,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1014,1140,1141,1142,1143,1144,1145,
1146,1147,1148,1149,1015,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1016,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1017,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1018,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1019,1190,
1191,1192,1193,1194,1195,1196,1197,1198,1199,1002,1020,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1021,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1022,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1023,1230,1231,1232,1233,1234,1235,
1236,1237,1238,1239,1024,1240,1241,1242,1243,1244,1245,1246,1248,1025,1250,1251,1252,1254,1255,1257,1026,1027,1028,1029,1003,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1005,1051,1052,1053,1054,
1055,1057,1058,1059,1006,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1007,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1008,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1009,1090,1091,1092,1094,1095,1096,1097,1098,1099}; 
int route[N][routeLenght] = {
{27,51,13,50,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{41,29,30,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,2,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{41,29,13,9,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,12,26,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,10,6,2,1,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,46,11,56,7,55,3,2,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,10,9,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,12,26,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{44,32,33,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,30,14,10,6,5,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,8,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,24,8,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{35,22,24,26,28,33,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{45,33,28,52,16,12,8,4,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,4,22,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{37,26,12,8,4,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,49,14,10,6,2,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,24,26,12,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{39,33,28,26,24,8,7,6,5,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,4,22,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,24,26,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,32,16,12,26,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{41,29,13,50,14,49,15,47,16,52,28,26,24,22,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,26,24,8,7,6,2,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{44,32,16,47,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{44,32,16,12,8,4,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,26,24,22,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,2,1,5,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{37,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,32,16,12,8,24,22,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,1,2,6,10,14,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,48,31,32,33,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,32,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,8,12,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,5,6,7,8,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,24,8,7,56,11,46,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,1,5,9,13,50,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,8,12,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,47,16,52,28,26,24,22,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{45,33,32,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,4,22,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,5,6,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{45,33,32,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{39,33,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{35,22,4,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,12,8,4,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{40,29,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{37,26,12,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{44,32,33,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,24,8,7,6,5,9,13,29,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,8,12,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{25,9,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{25,9,10,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,4,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,5,6,2,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,4,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,46,11,56,7,6,5,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{44,32,31,30,29,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,24,8,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,24,8,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,1,2,3,55,7,56,11,46,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,30,29,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,33,32,31,30,29,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{41,29,13,50,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{42,30,14,10,9,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,2,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,2,6,5,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{44,32,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,33,32,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{44,32,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,26,24,8,7,6,2,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,30,14,10,6,2,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,5,6,7,8,24,26,28,33,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,8,12,16,32,33,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,48,31,30,29,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,1,5,9,13,50,14,49,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,33,32,31,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,1,5,9,10,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,29,30,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,4,22,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{42,30,14,10,6,2,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{40,29,13,9,5,1,2,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,2,6,7,8,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,30,29,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{45,33,28,52,16,47,15,49,14,50,13,9,5,1,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,26,24,22,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,5,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,26,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,33,32,31,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,24,8,7,6,5,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,1,2,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,32,31,30,29,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,29,30,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,49,14,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,4,22,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,2,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,12,26,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,4,22,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,5,1,2,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,5,9,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,30,29,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,5,6,2,3,4,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,26,24,8,7,55,3,2,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,26,24,8,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,33,32,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,30,29,13,9,5,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{45,33,32,31,30,29,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,24,8,7,56,11,46,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,1,2,3,4,22,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{39,33,28,26,24,8,7,55,3,2,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{44,32,16,12,8,4,3,2,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,8,12,26,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{39,33,28,26,24,22,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{37,26,12,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,24,8,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{37,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{42,30,14,10,6,7,8,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{40,29,13,9,5,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,5,6,7,8,24,26,28,33,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{39,33,28,26,24,22,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,2,1,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,2,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,32,33,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{42,30,14,10,6,2,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,6,5,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,24,26,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,24,8,4,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{35,22,4,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,1,5,9,10,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,24,8,7,6,5,9,13,29,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,5,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,32,33,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{45,33,28,52,16,47,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,1,5,9,13,50,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,46,11,56,7,6,5,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,2,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,32,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{41,29,13,50,14,49,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{25,9,10,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,8,12,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,56,7,8,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,46,11,56,7,55,3,2,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,24,8,7,6,10,14,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{42,30,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{37,26,12,11,10,9,13,29,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{25,9,10,11,12,16,32,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{40,29,30,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,33,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,49,14,50,13,29,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,32,33,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,8,12,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,1,2,3,55,7,56,11,46,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{45,33,28,52,16,47,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{25,9,10,11,46,15,48,31,32,33,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{44,32,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,29,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{39,33,32,31,48,15,46,11,10,9,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,24,26,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,5,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,4,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,46,11,56,7,55,3,2,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,32,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,49,14,10,6,2,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,24,8,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,2,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{40,29,30,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{44,32,33,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{41,29,13,50,14,49,15,47,16,12,8,4,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,12,8,4,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,4,22,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,1,5,9,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,24,26,28,33,32,31,30,29,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,5,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{40,29,30,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,47,16,32,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{25,9,13,29,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,29,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{37,26,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,12,8,4,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{37,26,12,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,8,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{41,29,13,9,5,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{40,29,30,31,32,33,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{42,30,14,49,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{39,33,32,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}}; 
const int nodePositions[57][3] = {{20,0,1000},
{7,600,800},{41,1600,400},{5,600,400},{44,1600,1000},{31,1200,800},{2,400,600},{36,600,1600},{48,1100,800},{1,400,400},{27,1000,0},{47,1000,900},{19,0,800},{49,1000,700},{22,400,1200},{15,1000,800},{30,1200,600},{56,700,800},{3,400,800},{17,0,400},{12,800,1000},{21,400,0},{34,0,1200},{43,1600,800},{57,1300,800},{54,300,800},{13,1000,400},{26,800,1200},{32,1200,1000},{8,600,1000},{52,1000,1100},{24,600,1200},{11,800,800},{23,600,0},{37,800,1600},{18,0,600},{6,600,600},{38,1000,1600},{35,400,1600},{42,1600,600},{25,800,0},{4,400,1000},{46,900,800},{16,1000,1000},{39,1200,1600},{55,500,800},{28,1000,1200},{14,1000,600},{53,1000,1300},{51,1000,300},{40,1200,0},
{33,1200,1200},{10,800,600},{50,1000,500},{9,800,400},{29,1200,400},{45,1600,1200}};
int timePassed[N] = {137,132,124,72,75,73,73,69,72,25,69,66,67,128,66,56,64,68,50,91,90,33,65,127,61,87,60,27,85,62,6,58,59,99,57,28,2,56,56,53,77,52,76,48,125,51,53,12,52,73,
5,7,45,44,42,114,44,68,36,67,67,45,36,42,66,42,148,36,33,36,62,1,60,57,36,57,32,123,11,55,52,24,22,26,6,26,27,2,122,26,23,2,22,11,16,17,40,7,14,68,
11,6,15,13,9,35,35,34,4,31,104,120,7,5,28,2,29,5,27,22,26,2,123,3,22,23,19,22,20,19,21,17,16,119,18,15,12,14,20,12,18,17,17,16,79,14,15,13,12,10,
10,9,9,8,7,113,7,5,7,7,4,1,5,2,111,4,3,2,2,0,0,115,84,63,114,134,118,112,108,114,111,83,133,55,110,108,132,78,132,130,130,107,104,100,96,25,154,103,73,125,
68,95,103,100,123,154,97,86,99,94,95,94,92,91,89,91,151,87,92,86,84,114,80,84,81,58,82,129,111,77,16,109,108,84,108,85,108,78,127,74,105,77,81,20,101,75,53,101};
int currentStartNode[N][2] = {{51,1},
{51,1},{29,1},{57,1},{54,1},{53,1},{51,1},{51,1},{53,1},{9,3},{57,1},{57,1},{53,1},{54,1},{51,1},{32,1},{57,1},{54,1},{8,2},{36,0},{35,0},{52,3},{51,1},{57,1},{51,1},{37,0},{57,1},{26,3},{39,0},{54,1},{26,3},{57,1},{54,1},{50,3},{53,1},{47,3},{8,4},{54,1},{53,1},{54,1},{37,0},{57,1},{21,0},{57,1},{51,1},{54,1},{53,1},{12,3},{51,1},{36,0},{13,4},
{12,3},{57,1},{51,1},{51,1},{33,1},{54,1},{23,0},{33,1},{39,0},{35,0},{53,1},{57,1},{53,1},{40,0},{54,1},{37,0},{51,1},{32,1},{43,0},{36,0},{12,3},{25,0},{25,0},{54,1},{23,0},{54,1},{53,1},{31,2},{36,0},{36,0},{1,1},{43,0},{53,1},{13,2},{57,1},{51,1},{14,2},{57,1},{54,1},{51,1},{16,2},{53,1},{32,1},{53,1},{57,1},{23,0},{4,1},{53,1},{50,5},{53,1},
{1,1},{51,1},{54,1},{54,1},{42,0},{40,0},{43,0},{2,1},{43,0},{52,3},{57,1},{38,0},{51,1},{38,0},{53,1},{36,0},{54,1},{17,0},{38,0},{43,0},{51,1},{54,1},{54,1},{19,0},{43,0},{19,0},{27,0},{43,0},{27,0},{23,0},{43,0},{27,0},{54,1},{38,0},{38,0},{38,0},{43,0},{45,0},{43,0},{36,0},{17,0},{39,0},{44,0},{12,3},{39,0},{37,0},{36,0},{37,0},{42,0},{40,0},
{23,0},{20,0},{19,0},{39,0},{54,1},{18,0},{19,0},{34,0},{43,0},{43,0},{43,0},{42,0},{19,0},{54,1},{34,0},{36,0},{35,0},{17,0},{36,0},{27,0},{57,1},{52,3},{50,5},{53,1},{57,1},{51,1},{54,1},{54,1},{53,1},{57,1},{50,3},{25,0},{47,5},{51,1},{53,1},{36,0},{49,3},{37,0},{25,0},{40,0},{53,1},{54,1},{54,1},{54,1},{47,5},{21,0},{53,1},{52,3},{25,0},{52,3},
{54,1},{57,1},{51,1},{39,0},{36,0},{51,1},{22,1},{53,1},{51,1},{53,1},{57,1},{57,1},{53,1},{53,1},{57,1},{36,0},{53,1},{54,1},{57,1},{57,1},{40,0},{57,1},{53,1},{32,1},{50,3},{53,1},{54,1},{21,0},{57,1},{33,5},{23,0},{40,0},{54,1},{25,0},{51,1},{37,0},{53,1},{57,1},{57,1},{37,0},{51,1},{54,1},{5,4},{40,0},{51,1},{49,3},{39,0}};
typedef int[0,nodes] node_t;

//networkEdges constains touples of the form (fromNodeId, toNodeId, lanes, edgeweight, carsOnEdge)
int networkEdges[144][6] = {{20,4,1,27,1,393},
{7,56,2,6,0,89},{7,8,1,12,0,179},{7,6,1,12,0,179},{7,55,2,6,0,89},{41,29,1,26,0,393},{5,23,1,27,1,393},{5,9,1,12,0,186},{5,1,1,12,0,186},{5,6,1,12,0,186},{44,32,1,27,1,393},{31,30,1,14,1,179},{31,48,2,6,0,89},{31,32,1,12,0,179},{31,57,2,6,0,89},{2,3,1,12,0,179},{2,1,1,12,0,186},{2,6,1,14,1,186},{2,18,1,26,0,393},{36,24,1,37,13,393},{48,15,4,4,0,79},{48,31,3,5,0,89},{1,2,1,14,1,186},{1,5,1,14,1,186},{1,17,1,26,0,393},{1,21,1,26,0,393},{27,51,2,22,4,296},{47,15,4,7,3,79},{47,16,3,5,0,89},{19,54,2,22,5,296},{49,15,4,6,2,79},{49,14,3,5,0,89},{22,34,1,26,0,393},{22,4,1,14,1,186},{22,24,1,12,0,186},{22,35,1,26,0,393},{15,46,2,5,0,79},{15,47,2,5,0,79},{15,49,2,5,0,79},{15,48,2,5,0,79},{30,42,1,26,0,393},{30,29,1,12,0,186},{30,14,1,12,0,179},{30,31,1,12,0,179},{56,7,3,5,0,89},{56,11,3,5,0,89},{3,2,1,12,0,179},{3,54,2,6,0,89},{3,55,2,6,0,89},{3,4,1,12,0,179},{17,1,1,29,3,393},
{12,16,1,17,3,179},{12,26,1,14,1,186},{12,11,1,12,0,179},{12,8,1,12,0,186},{21,1,1,29,3,393},{34,22,1,28,2,393},{43,57,2,22,11,296},{57,43,2,21,0,296},{57,31,3,19,28,89},{54,3,3,21,31,89},{54,19,2,21,0,296},{13,50,2,6,2,89},{13,9,1,12,0,179},{13,29,1,12,0,179},{13,51,2,6,0,89},{26,28,1,14,1,179},{26,37,1,26,0,393},{26,24,1,12,0,186},{26,12,1,14,1,186},{32,44,1,26,0,393},{32,16,1,12,0,179},{32,31,1,14,1,179},{32,33,1,17,3,186},{8,7,1,12,0,179},{8,24,1,14,1,186},{8,12,1,12,0,186},{8,4,1,14,1,186},{52,28,3,6,1,89},{52,16,3,7,4,89},{24,36,1,26,0,393},{24,8,1,12,0,186},{24,26,1,12,0,186},{24,22,1,12,0,186},{11,46,2,6,0,89},{11,56,2,6,0,89},{11,12,1,12,0,179},{11,10,1,12,0,179},{23,5,1,31,6,393},{37,26,1,33,8,393},{18,2,1,27,1,393},{6,2,1,12,0,186},{6,7,1,12,0,179},{6,5,1,12,0,186},{6,10,1,12,0,186},{38,53,2,22,5,296},{35,22,1,29,3,393},{42,30,1,29,3,393},{25,9,1,31,6,393},{4,20,1,26,0,393},{4,8,1,14,1,186},
{4,3,1,12,0,179},{4,22,1,12,0,186},{46,15,4,4,0,79},{46,11,3,5,0,89},{16,47,2,6,1,89},{16,32,1,12,0,179},{16,52,2,6,0,89},{16,12,1,12,0,179},{39,33,1,32,7,393},{55,7,3,5,0,89},{55,3,3,5,0,89},{28,26,1,12,0,179},{28,52,2,6,0,89},{28,33,1,12,0,179},{28,53,2,6,0,89},{14,30,1,12,0,179},{14,50,2,6,0,89},{14,49,2,6,0,89},{14,10,1,14,1,179},{53,28,3,19,28,89},{53,38,2,21,0,296},{51,13,3,18,25,89},{51,27,2,21,0,296},{40,29,1,32,7,393},{33,28,1,12,0,179},{33,32,1,17,3,186},{33,39,1,26,0,393},{33,45,1,26,0,393},{10,6,1,12,0,186},{10,9,1,12,0,186},{10,14,1,12,0,179},{10,11,1,12,0,179},{50,13,3,5,0,89},{50,14,3,8,5,89},{9,13,1,12,0,179},{9,25,1,27,1,393},{9,5,1,12,0,186},{9,10,1,12,0,186},{29,30,1,14,1,186},{29,13,1,12,0,179},{29,41,1,26,0,393},{29,40,1,26,0,393},{45,33,1,27,1,393}};

int curr_car = 0;
int uniquetest = 0;
int reroute[N];
int carDone[N];
const int horizon = 40;
int Done = 0;
double totalTravelTime = 0.0;

int inNodes[20][2] = {{17,0}, {18,0}, {54,19}, {20,0}, {34,0}, {35,0}, {36,0}, {37,0}, {53,38}, {39,0}, {45,0}, {44,0}, {57,43}, {42,0}, {41,0}, {40,0}, {51,27}, {25,0}, {23,0}, {21,0}};

typedef int[0, N-1] id_car;

broadcast chan Reroute, DoneRerouting;

int getEdgeIndex(int fromNode, int toNode)
{
    int k = 0;
    while(networkEdges[k][0] != fromNode || networkEdges[k][1] != toNode)
    {
        k++;
    }
    return k;
}

</declaration>
	<template>
		<name x="5" y="5">Simulator</name>
		<declaration>clock x,y;
// needs abosolute path to be used in tempmodel
///home/thomas/AAUP7/UppaalModels/Libraries/lib.so

import "/lib64/lib.so" {
	int calc_edge_weight(int lanes, int cars, int lenght);
    int get_threshold(int edge_length);
	//alias = int calc_edge_weight(int lanes, int cars, int lenght);
};


void constructor()
{
    int i = 0;

    for(i = 0; i &lt; N; i++)
    {
        reroute[i] = 0;
        carDone[i] = 0;
    }
}


//check if cars have changed edge
void flow_traffic()
{
    int i = 0;
    int currentEdge = 0;
    int timePassedCarI = 0;
    int edgeTT = 0;
    int edgeId;
    int fromNode, toNode, nextToNode;  
    int fromIndex;  
    int allDone = 0;


    for (i = 0; i &lt; N; i++)
    {
        allDone += carDone[i];
        if(!carDone[i])
        {
            timePassedCarI = timePassed[i];
            
            fromNode = currentStartNode[i][0];
            fromIndex = currentStartNode[i][1];
            toNode = route[i][fromIndex+1];

            if(toNode == -1)
            {
                carDone[i] = 1;
            }
            else
            {
                edgeId = getEdgeIndex(fromNode, toNode);
        
                edgeTT = networkEdges[edgeId][3];

                if(timePassedCarI &gt;= edgeTT)
                {
                    currentStartNode[i][0] = toNode;
                    currentStartNode[i][1]++;
                    totalTravelTime = totalTravelTime + (timePassedCarI/100);
                    timePassed[i] = 0;
                    networkEdges[edgeId][4] = networkEdges[edgeId][4] - 1;
                    nextToNode = route[i][fromIndex+2];

                    if(nextToNode != -1)
                    {
                        edgeId = getEdgeIndex(toNode, nextToNode);
                        networkEdges[edgeId][4] = networkEdges[edgeId][4] + 1;
                    }
                }
                else
                {
                    //update time passed
                    timePassed[i] += 10;
                }
            }
        }
    }

    if(allDone == N)
    {
        Done = 1;
    }

}

void update_weights()
{
    int i = 0;
    int carsOnEdge = 0;
    
    for(i = 0; i &lt; numEdges; i++)
    {
        carsOnEdge = networkEdges[i][4];        
        networkEdges[i][3] = calc_edge_weight(networkEdges[i][2], carsOnEdge, networkEdges[i][5]);
    }
}

//TODO: ensure that cars with congested out edges are not added for rerouting
void check_reroute()
{
    int i = 0, j = 0;
    int fromIndex, nextFromNode, nextToNode;
    int edgeId;
    int weight;
    int outNode = 0;
    int threshold = 0;

    for(i = 0; i &lt; N; i++)
    {
        if(!carDone[i])
        {
            j = 0;
            outNode = 0;
            threshold = 0;
            fromIndex = currentStartNode[i][1];

            if(route[i][fromIndex+3] != -1)
            {
            nextFromNode = route[i][fromIndex+1];
            nextToNode = route[i][fromIndex+2];
            for(j = 0; j &lt; 20; j++)
            {
                if(nextToNode == inNodes[j][0] || nextToNode == inNodes[j][1])
                {
                    outNode = 1;
                }
            }
            edgeId = getEdgeIndex(nextFromNode, nextToNode);

            weight = networkEdges[edgeId][3];

            threshold = get_threshold(networkEdges[edgeId][5]);

            if(weight &gt; threshold &amp;&amp; outNode == 0)
            {
                reroute[i] = 1;
            }
            }
        }
      
    }
       
}</declaration>
		<location id="id0" x="-501" y="-246">
			<label kind="invariant" x="-511" y="-229">y &lt;= 10</label>
		</location>
		<location id="id1" x="-773" y="-433">
			<name x="-783" y="-467">Init</name>
			<committed/>
		</location>
		<location id="id2" x="-501" y="-433">
			<urgent/>
		</location>
		<location id="id3" x="-264" y="-433">
			<urgent/>
		</location>
		<location id="id4" x="34" y="-433">
			<name x="24" y="-467">End</name>
		</location>
		<location id="id5" x="-179" y="-305">
			<urgent/>
		</location>
		<init ref="id1"/>
		<transition controllable="false">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="-484" y="-314">y == 10</label>
			<label kind="assignment" x="-501" y="-339">flow_traffic(), update_weights(), y = 0</label>
		</transition>
		<transition controllable="false">
			<source ref="id5"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-306" y="-212">DoneRerouting?</label>
			<nail x="-179" y="-246"/>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="guard" x="-162" y="-390">x &lt; horizon &amp;&amp; Done == 0</label>
			<label kind="synchronisation" x="-162" y="-373">Reroute!</label>
			<nail x="-179" y="-373"/>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-221" y="-458">x &gt;= horizon || Done == 1</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="assignment" x="-450" y="-458">check_reroute()</label>
		</transition>
		<transition controllable="false">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="assignment" x="-697" y="-458">constructor()</label>
		</transition>
	</template>
	<template>
		<name>Rerouter</name>
		<declaration>int connectingNodes[3];
int extendedNodes[3];

void getConnectingNodes(int node, int prevNode)
{
    int i = 0;
    int foundNodes = 0;
    int edge[6];
    connectingNodes[0] = -1;
    connectingNodes[1] = -1;
    connectingNodes[2] = -1;

    for(i = 0; i &lt; numEdges; i++)
    {
        edge = networkEdges[i];
        if(edge[0] == node &amp;&amp; edge[1] != prevNode)
        {
            connectingNodes[foundNodes] = edge[1];
            foundNodes++;
        }
    }

}

void getExtendedNodes(int node, int prevNode)
{
    int i = 0;
    int foundNodes = 0;
    int edge[6];
    extendedNodes[0] = -1;
    extendedNodes[1] = -1;
    extendedNodes[2] = -1;

    for(i = 0; i &lt; numEdges; i++)
    {
        edge = networkEdges[i];
        if(edge[0] == node &amp;&amp; edge[1] != prevNode)
        {
            extendedNodes[foundNodes] = edge[1];
            foundNodes++;
        }
    }

}

int manhattanDistance(int node1, int node2)
{
    int i = 0, j = 0;

    while(node1 != nodePositions[i][0])
    {
        i++;
    }
    while(node2 != nodePositions[j][0])
    {
        j++;
    }

    return abs(nodePositions[i][1] - nodePositions[j][1]) + abs(nodePositions[i][2] - nodePositions[j][2]);
}

int getBestConnection(int destNode, int rerouteNode)
{
    int j = 0, k = 0, i = 0;
    int illegalInNode = 0;
    int edgeId, edgeWeight, bestConnection; 
    int bestExtension = 0;
    int edgeWeights[3];
    int extendedEdgeWeights[3];

    for (j = 0; j &lt; 3; j++)
    {   
        if(connectingNodes[j] != -1)
        {
            bestExtension = 0;
            edgeId = getEdgeIndex(rerouteNode, connectingNodes[j]);

            edgeWeight = networkEdges[edgeId][3];

            edgeWeights[j] = manhattanDistance(connectingNodes[j], destNode) + edgeWeight;

            getExtendedNodes(connectingNodes[j], rerouteNode);

            extendedEdgeWeights[0] = 0;
            extendedEdgeWeights[1] = 0;
            extendedEdgeWeights[2] = 0;

            for (i = 0; i &lt; 3; i++)
            {
                if(extendedNodes[i] != -1)
                {
                    edgeId = getEdgeIndex(connectingNodes[j], extendedNodes[i]);

                    edgeWeight = networkEdges[edgeId][3];
    
                    extendedEdgeWeights[i] = manhattanDistance(extendedNodes[i], destNode) + edgeWeight;

                    for(k = 0; k &lt; 20; k++)
                    {
                        if(extendedNodes[i] == inNodes[k][0] &amp;&amp; inNodes[k][0] != destNode &amp;&amp; inNodes[k][1] != destNode)
                        {
                            illegalInNode = 1;
                        }
                    }

                    if(illegalInNode == 1)
                    {
                        extendedEdgeWeights[i] = 32000;
                        illegalInNode = 0;
                        
                    }
                    else if (extendedEdgeWeights[i] &lt;  extendedEdgeWeights[bestExtension])
                    {
                        bestExtension = i;   
                    }
                    
                }
            }

            edgeWeights[j] = edgeWeights[j] + extendedEdgeWeights[bestExtension];

            for(k = 0; k &lt; 20; k++)
            {
                if(connectingNodes[j] == inNodes[k][0] &amp;&amp; inNodes[k][0] != destNode &amp;&amp; inNodes[k][1] != destNode)
                {
                    illegalInNode = 1;
                }
            }

            if(illegalInNode == 1)
            {
                edgeWeights[j] = 32000;
            }            
            if( edgeWeights[j] &lt;  edgeWeights[bestConnection])
            {
                bestConnection = j;
            }
            illegalInNode = 0;
        }
    }

    return connectingNodes[bestConnection]; 
}

void simpleReroute()
{
    int carRoute[routeLenght] = route[curr_car];
    int i = 0;
    int destNode;
    int curNode = currentStartNode[curr_car][0];
    int curIndex = currentStartNode[curr_car][1];
    int prevNode = curNode;
    int rerouteNode;
    int bestConnection = 0;


    i = curIndex;
    while (carRoute[i+1] != -1)
    {            
        i++;
    }

    destNode = carRoute[i];
    if (curNode != destNode)
    {
        curIndex++;
        rerouteNode = route[curr_car][curIndex];

        while (rerouteNode != destNode)
        {
            bestConnection = 0;

            getConnectingNodes(rerouteNode, prevNode);
        
            bestConnection = getBestConnection(destNode, rerouteNode);
        
            carRoute[curIndex + 1] = bestConnection;
            prevNode = rerouteNode;
            rerouteNode = bestConnection;
            curIndex++;        
        }

        while(curIndex &lt; (routeLenght-1))
        {
            carRoute[curIndex+1] = -1;
            curIndex++;
        }         

        route[curr_car] = carRoute;

    }
    
}


void choose_route(int strategy)
{
    if(!carDone[curr_car])
    {
        reroute[curr_car] = 0;   
    
        if(strategy == 1)
        {
            simpleReroute();
        }
        else if (strategy == 0)
        {
            //Keep current route
        }
    }

}</declaration>
		<location id="id6" x="-909" y="-195">
		</location>
		<location id="id7" x="-714" y="-195">
			<urgent/>
		</location>
		<location id="id8" x="-510" y="-195">
			<urgent/>
		</location>
		<location id="id9" x="-314" y="-289">
			<urgent/>
		</location>
		<location id="id10" x="-314" y="-110">
			<urgent/>
		</location>
		<location id="id11" x="-110" y="-195">
			<urgent/>
		</location>
		<location id="id12" x="59" y="-195">
			<committed/>
		</location>
		<init ref="id6"/>
		<transition controllable="false">
			<source ref="id7"/>
			<target ref="id11"/>
			<label kind="guard" x="-696" y="-416">reroute[curr_car] == 0</label>
			<nail x="-714" y="-382"/>
			<nail x="-110" y="-382"/>
		</transition>
		<transition controllable="false">
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="guard" x="-696" y="-229">reroute[curr_car] == 1</label>
		</transition>
		<transition controllable="false">
			<source ref="id12"/>
			<target ref="id6"/>
			<label kind="assignment" x="-408" y="85">curr_car = 0</label>
			<nail x="59" y="76"/>
			<nail x="-909" y="76"/>
		</transition>
		<transition controllable="false">
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="guard" x="-68" y="-221">curr_car &gt;= (N-1)</label>
			<label kind="synchronisation" x="-76" y="-238">DoneRerouting!</label>
		</transition>
		<transition controllable="false">
			<source ref="id11"/>
			<target ref="id7"/>
			<label kind="guard" x="-450" y="8">curr_car &lt; (N-1)</label>
			<label kind="assignment" x="-450" y="-17">curr_car++</label>
			<nail x="-110" y="-25"/>
			<nail x="-714" y="-25"/>
		</transition>
		<transition controllable="false">
			<source ref="id9"/>
			<target ref="id11"/>
		</transition>
		<transition controllable="false">
			<source ref="id10"/>
			<target ref="id11"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id10"/>
			<label kind="assignment" x="-501" y="-127">choose_route(1)</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="assignment" x="-501" y="-280">choose_route(0)</label>
		</transition>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-841" y="-221">Reroute?</label>
		</transition>
	</template>
	<system>// Place template instantiations here.


// List one or more processes to be composed into a system.
system Simulator, Rerouter;
    </system>
	<queries>
		<query>
			<formula>E&lt;&gt; Simulator.End</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy Opt =minE (totalTravelTime) [&lt;=horizon]: &lt;&gt; Simulator.End</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
