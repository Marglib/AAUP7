<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int routeLenght = 25;
const int max = 16000;
const int nodes = 57;
const int numEdges = 144;
const int N = 2;

const int pid[N] = {1981,
1998}; 
int route[N][routeLenght] = {
{17,1,5,9,13,50,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,5,6,7,8,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}}; 
int newRoute[N][routeLenght] = {
{17,1,5,9,13,50,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,5,6,7,8,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}}; 
const int nodePositions[57][3] = {{42,1600,600},
{18,0,600},{36,600,1600},{17,0,400},{28,1000,1200},{12,800,1000},{40,1200,0},{5,600,400},{9,800,400},{24,600,1200},{34,0,1200},{32,1200,1000},{45,1600,1200},{26,800,1200},{14,1000,600},{27,1000,0},{44,1600,1000},{16,1000,1000},{21,400,0},{7,600,800},{25,800,0},{46,900,800},{19,0,800},{3,400,800},{52,1000,1100},{4,400,1000},{20,0,1000},{53,1000,1300},{51,1000,300},{6,600,600},{8,600,1000},{37,800,1600},{29,1200,400},{54,300,800},{1,400,400},{41,1600,400},{55,500,800},{50,1000,500},{11,800,800},{10,800,600},{49,1000,700},{43,1600,800},{47,1000,900},{48,1100,800},{35,400,1600},{22,400,1200},{39,1200,1600},{38,1000,1600},{30,1200,600},{57,1300,800},{33,1200,1200},
{23,600,0},{2,400,600},{13,1000,400},{31,1200,800},{56,700,800},{15,1000,800}};
int timePassed[N] = {12,22};
int currentStartNode[N][2] = {{53,13},
{53,8}};
int cost[nodes][nodes] = {{16000,198,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{198,16000,191,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,191,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,95,95,16000,16000},
{16000,16000,191,16000,16000,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{198,16000,16000,16000,16000,198,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,198,16000,16000,198,16000,191,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,191,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,95,95,16000},
{16000,16000,16000,198,16000,16000,191,16000,16000,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,198,16000,16000,16000,16000,198,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,198,16000,16000,198,16000,191,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,191,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,95,16000,16000,16000,16000,16000,16000,16000,16000,16000,95,16000},
{16000,16000,16000,16000,16000,16000,16000,198,16000,16000,191,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,95,95,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,95,95,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,84,84,84,84,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,95,16000,16000,16000,16000,95,16000,16000,16000,16000,16000},
{419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,317,16000,16000,16000},
{16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,198,16000,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,198,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,317,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,95,95,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,198,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,191,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,95,16000,16000,16000,16000,16000,16000,16000,16000,95},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,191,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,191,16000,16000,16000,198,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,317,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,317},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,94,16000,16000,16000,83,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,83,94,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,83,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,94,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,94,83,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,94,94,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,94,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,317,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,94,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,94,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,94,16000,16000,16000,16000,16000,16000,16000,16000,16000,317,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,94,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,317,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,94,16000,16000,16000,94,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,94,16000,16000,16000,94,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,94,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,317,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000}};
typedef int[0,nodes] node_t;

int travelHist[N][2]; 

//networkEdges constains touples of the form (fromNodeId, toNodeId, lanes, edgeweight, carsOnEdge)
int networkEdges[144][7] = {{42,30,1,26,0,393,0},
{18,2,1,26,0,393,0},{36,24,1,26,0,393,0},{17,1,1,26,0,393,0},{28,53,2,6,0,89,0},{28,26,1,12,0,179,0},{28,52,2,6,0,89,0},{28,33,1,12,0,179,0},{12,16,1,12,0,179,0},{12,26,1,12,0,186,0},{12,11,1,12,0,179,0},{12,8,1,12,0,186,0},{40,29,1,26,0,393,0},{5,9,1,12,0,186,0},{5,1,1,12,0,186,0},{5,6,1,12,0,186,0},{5,23,1,26,0,393,0},{9,13,1,12,0,179,0},{9,10,1,12,0,186,0},{9,5,1,12,0,186,0},{9,25,1,26,0,393,0},{24,36,1,26,0,393,0},{24,22,1,12,0,186,0},{24,26,1,12,0,186,0},{24,8,1,12,0,186,0},{34,22,1,26,0,393,0},{32,44,1,26,0,393,0},{32,31,1,12,0,179,0},{32,16,1,12,0,179,0},{32,33,1,12,0,186,0},{45,33,1,26,0,393,0},{26,37,1,26,0,393,0},{26,24,1,12,0,186,0},{26,28,1,12,0,179,0},{26,12,1,12,0,186,0},{14,10,1,12,0,179,0},{14,49,2,6,0,89,0},{14,50,2,6,0,89,0},{14,30,1,12,0,179,0},{27,51,2,21,0,296,0},{44,32,1,26,0,393,0},{16,47,2,6,0,89,0},{16,32,1,12,0,179,0},{16,52,2,6,0,89,0},{16,12,1,12,0,179,0},{21,1,1,26,0,393,0},{7,56,2,6,0,89,0},{7,55,2,6,0,89,0},{7,6,1,12,0,179,0},{7,8,1,12,0,179,0},{25,9,1,26,0,393,0},
{46,15,4,4,0,79,0},{46,11,3,5,0,89,0},{19,54,2,21,0,296,0},{3,4,1,12,0,179,0},{3,54,2,6,0,89,0},{3,55,2,6,0,89,0},{3,2,1,12,0,179,0},{52,28,3,5,0,89,0},{52,16,3,5,0,89,0},{4,3,1,12,0,179,0},{4,20,1,26,0,393,0},{4,22,1,12,0,186,0},{4,8,1,12,0,186,0},{20,4,1,26,0,393,0},{53,38,2,21,2,296,0},{53,28,3,5,0,89,0},{51,13,3,5,0,89,0},{51,27,2,21,0,296,0},{6,10,1,12,0,186,0},{6,7,1,12,0,179,0},{6,5,1,12,0,186,0},{6,2,1,12,0,186,0},{8,4,1,12,0,186,0},{8,24,1,12,0,186,0},{8,7,1,12,0,179,0},{8,12,1,12,0,186,0},{37,26,1,26,0,393,0},{29,13,1,12,0,179,0},{29,30,1,12,0,186,0},{29,41,1,26,0,393,0},{29,40,1,26,0,393,0},{54,19,2,21,0,296,0},{54,3,3,5,0,89,0},{1,21,1,26,0,393,0},{1,17,1,26,0,393,0},{1,5,1,12,0,186,0},{1,2,1,12,0,186,0},{41,29,1,26,0,393,0},{55,3,3,5,0,89,0},{55,7,3,5,0,89,0},{50,13,3,5,0,89,0},{50,14,3,5,0,89,0},{11,10,1,12,0,179,0},{11,56,2,6,0,89,0},{11,46,2,6,0,89,0},{11,12,1,12,0,179,0},{10,14,1,12,0,179,0},{10,9,1,12,0,186,0},{10,6,1,12,0,186,0},{10,11,1,12,0,179,0},
{49,14,3,5,0,89,0},{49,15,4,4,0,79,0},{43,57,2,21,0,296,0},{47,16,3,5,0,89,0},{47,15,4,4,0,79,0},{48,31,3,5,0,89,0},{48,15,4,4,0,79,0},{35,22,1,26,0,393,0},{22,4,1,12,0,186,0},{22,24,1,12,0,186,0},{22,34,1,26,0,393,0},{22,35,1,26,0,393,0},{39,33,1,26,0,393,0},{38,53,2,21,0,296,0},{30,14,1,12,0,179,0},{30,42,1,26,0,393,0},{30,29,1,12,0,186,0},{30,31,1,12,0,179,0},{57,31,3,5,0,89,0},{57,43,2,21,0,296,0},{33,45,1,26,0,393,0},{33,32,1,12,0,186,0},{33,28,1,12,0,179,0},{33,39,1,26,0,393,0},{23,5,1,26,0,393,0},{2,18,1,26,0,393,0},{2,3,1,12,0,179,0},{2,1,1,12,0,186,0},{2,6,1,12,0,186,0},{13,9,1,12,0,179,0},{13,29,1,12,0,179,0},{13,51,2,6,0,89,0},{13,50,2,6,0,89,0},{31,30,1,12,0,179,0},{31,57,2,6,0,89,0},{31,32,1,12,0,179,0},{31,48,2,6,0,89,0},{56,7,3,5,0,89,0},{56,11,3,5,0,89,0},{15,47,2,5,0,79,0},{15,48,2,5,0,79,0},{15,49,2,5,0,79,0},{15,46,2,5,0,79,0}};

int curr_car = 0;
int uniquetest = 0;
int reroute[N];
int carDone[N];
const int horizon = 40;
int Done = 0;
double rerouteTime = 0.0;
/*const int INT32_MAX = 2147483647;
typedef int[0, INT32_MAX] int32_t;
int32_t totalTravelTime = 0;
*/
double totalTravelTime = 0.0;

int inNodes[20][2] = {{17,0}, {18,0}, {54,19}, {20,0}, {34,0}, {35,0}, {36,0}, {37,0}, {53,38}, {39,0}, {45,0}, {44,0}, {57,43}, {42,0}, {41,0}, {40,0}, {51,27}, {25,0}, {23,0}, {21,0}};

typedef int[0, N-1] id_car;

broadcast chan Reroute, DoneRerouting;

int getEdgeIndex(int fromNode, int toNode)
{
    int k = 0;
    while(networkEdges[k][0] != fromNode || networkEdges[k][1] != toNode)
    {
        k++;
        if(k == numEdges)
        {
            return -1;
        }
    }
    return k;
}

</declaration>
	<template>
		<name x="5" y="5">Simulator</name>
		<declaration>clock x,y;
// needs abosolute path to be used in tempmodel
///home/thomas/AAUP7/UppaalModels/Libraries/lib.so

import "/Libraries/lib.so" {
	int calc_edge_weight(int lanes, int cars, int lenght);
    int get_threshold(int edge_length);
	//alias = int calc_edge_weight(int lanes, int cars, int lenght);
};

void create_adjacency_matrix()
{
    int x = 0, y = 0, w1, w2;
    int edgeId1, edgeId2;

    for(x=0; x&lt; nodes; x++)
    {
        for(y=x+1; y&lt; nodes; y++)
        {
            edgeId1 = getEdgeIndex(x, y);
            edgeId2 = getEdgeIndex(y, x);

            if (edgeId1 != -1)
            {    
                //w = manhattanDistance(x, y) + networkEdges[edgeId][3];
                w1 = networkEdges[edgeId1][5] + networkEdges[edgeId1][3];
            }
            /*else if ( x == y)
            {
                w  = 0;
            } */
            else
            {
                w1 = max;
            }
            if(edgeId2 != -1)
            {
                w2 = networkEdges[edgeId2][5] + networkEdges[edgeId2][3];
            }
            else
            {
                w2 = max;
            }
            cost [x][y] = w1;
            cost [y][x] = w2;
        }
    }
}

void constructor()
{
    int i = 0;

    for(i = 0; i &lt; N; i++)
    {
        reroute[i] = 0;
        carDone[i] = 0;
        travelHist[i][0] = 0; 
        travelHist[i][1] = 0; 
    }
}


//check if cars have changed edge
void flow_traffic()
{
    int i = 0;
    int currentEdge = 0;
    int timePassedCarI = 0;
    int edgeTT = 0;
    int edgeId;
    int fromNode, toNode, nextToNode;  
    int fromIndex;  
    int allDone = 0;


    for (i = 0; i &lt; N; i++)
    {
        allDone += carDone[i];
        if(!carDone[i])
        {
            timePassedCarI = timePassed[i];
            
            fromNode = currentStartNode[i][0];
            fromIndex = currentStartNode[i][1];
            toNode = route[i][fromIndex+1];

            if(toNode == -1)
            {
                carDone[i] = 1;
            }
            else
            {
                edgeId = getEdgeIndex(fromNode, toNode);
        
                edgeTT = networkEdges[edgeId][3];

                if(timePassedCarI &gt;= edgeTT)
                {
                    currentStartNode[i][0] = toNode;
                    currentStartNode[i][1]++;
                    //totalTravelTime = totalTravelTime + (timePassedCarI/100);
                    timePassed[i] = 0;
                    networkEdges[edgeId][4] = networkEdges[edgeId][4] - 1;
                    nextToNode = route[i][fromIndex+2];

                    if(nextToNode != -1)
                    {
                        edgeId = getEdgeIndex(toNode, nextToNode);
                        networkEdges[edgeId][4] = networkEdges[edgeId][4] + 1;
                        travelHist[i][0] += 1;
                        travelHist[i][1] += networkEdges[edgeId][3];
                    }
                }
                else
                {
                    //update time passed
                    timePassed[i] += 10;
                }
            }
        }
    }

    if(allDone == N)
    {
        Done = 1;
    }

}

void update_weights()
{
    int i = 0;
    int carsOnEdge = 0;
    
    for(i = 0; i &lt; numEdges; i++)
    {
        carsOnEdge = networkEdges[i][4];        
        networkEdges[i][3] = calc_edge_weight(networkEdges[i][2], carsOnEdge, networkEdges[i][5]);
    }
}

//TODO: ensure that cars with congested out edges are not added for rerouting
void check_reroute()
{
    int i = 0, j = 0;
    int fromIndex, nextFromNode, nextToNode;
    int edgeId;
    int weight;
    int outNode = 0;
    int threshold = 0;

    for(i = 0; i &lt; N; i++)
    {
        if(!carDone[i])
        {
            j = 0;
            outNode = 0;
            threshold = 0;
            fromIndex = currentStartNode[i][1];

            if(route[i][fromIndex+3] != -1)
            {
            nextFromNode = route[i][fromIndex+1];
            nextToNode = route[i][fromIndex+2];
            for(j = 0; j &lt; 20; j++)
            {
                if(nextToNode == inNodes[j][0] || nextToNode == inNodes[j][1])
                {
                    outNode = 1;
                }
            }
            edgeId = getEdgeIndex(nextFromNode, nextToNode);

            weight = networkEdges[edgeId][3];

            threshold = get_threshold(networkEdges[edgeId][5]) - 3;

            if((weight &gt; threshold &amp;&amp; outNode == 0) || networkEdges[edgeId][6] == 1)
            {
                reroute[i] = 1;
            }
            }
        }
      
    }
       
}

void get_routing_result()
{
    int i = 0;
    int avgEdgeTT;

    for(i = 0; i &lt; N; i++)
    {
        if(travelHist[i][0] == 0)
        {
            avgEdgeTT = 0;
        }
        else
        {
            avgEdgeTT = (travelHist[i][1] / travelHist[i][0]);
        }
        
        totalTravelTime = totalTravelTime + (avgEdgeTT/10); 
    }

}</declaration>
		<location id="id0" x="-204" y="-510">
			<label kind="invariant" x="-280" y="-569">y &lt;= 10 &amp;&amp; x &lt;= horizon</label>
		</location>
		<location id="id1" x="-808" y="-510">
			<name x="-818" y="-544">Init</name>
			<committed/>
		</location>
		<location id="id2" x="-646" y="-510">
			<urgent/>
		</location>
		<location id="id3" x="-476" y="-510">
			<urgent/>
		</location>
		<location id="id4" x="8" y="-510">
			<name x="-2" y="-544">End</name>
		</location>
		<location id="id5" x="-366" y="-510">
			<urgent/>
		</location>
		<init ref="id1"/>
		<transition controllable="false">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-144" y="-459">y == 10 &amp;&amp; x &lt; horizon</label>
			<label kind="assignment" x="-272" y="-382">flow_traffic(), 
update_weights(),
y = 0</label>
			<nail x="-290" y="-395"/>
			<nail x="-112" y="-395"/>
		</transition>
		<transition controllable="false">
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="guard" x="-195" y="-535">x == horizon || Done == 1</label>
			<label kind="assignment" x="-178" y="-510">get_routing_result()</label>
		</transition>
		<transition controllable="false">
			<source ref="id5"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-349" y="-535">DoneRerouting?</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-459" y="-535">Reroute!</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="assignment" x="-621" y="-535">check_reroute()</label>
		</transition>
		<transition controllable="false">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="assignment" x="-774" y="-535">constructor()</label>
		</transition>
	</template>
	<template>
		<name>Rerouter</name>
		<declaration>int connectingNodes[3];
int extendedNodes[3];


void getConnectingNodes(int node, int prevNode)
{
    int i = 0;
    int foundNodes = 0;
    int edge[7];
    connectingNodes[0] = -1;
    connectingNodes[1] = -1;
    connectingNodes[2] = -1;

    for(i = 0; i &lt; numEdges; i++)
    {
        edge = networkEdges[i];
        if(edge[0] == node &amp;&amp; edge[1] != prevNode)
        {
            connectingNodes[foundNodes] = edge[1];
            foundNodes++;
        }
    }

}

void getExtendedNodes(int node, int prevNode)
{
    int i = 0;
    int foundNodes = 0;
    int edge[7];
    extendedNodes[0] = -1;
    extendedNodes[1] = -1;
    extendedNodes[2] = -1;

    for(i = 0; i &lt; numEdges; i++)
    {
        edge = networkEdges[i];
        if(edge[0] == node &amp;&amp; edge[1] != prevNode)
        {
            extendedNodes[foundNodes] = edge[1];
            foundNodes++;
        }
    }

}

int manhattanDistance(int node1, int node2)
{
    int i = 0, j = 0;

    while(node1 != nodePositions[i][0])
    {
        i++;
    }
    while(node2 != nodePositions[j][0])
    {
        j++;
    }

    return abs(nodePositions[i][1] - nodePositions[j][1]) + abs(nodePositions[i][2] - nodePositions[j][2]);
}

int getBestConnection(int destNode, int rerouteNode)
{
    int j = 0, k = 0, i = 0;
    int illegalInNode = 0;
    int edgeId, edgeWeight, bestConnection; 
    int bestExtension = 0;
    int edgeWeights[3];
    int extendedEdgeWeights[3];
    int closedEdge = 0;

    for (j = 0; j &lt; 3; j++)
    {   
        if(connectingNodes[j] != -1)
        {
            bestExtension = 0;
            edgeId = getEdgeIndex(rerouteNode, connectingNodes[j]);

            edgeWeight = networkEdges[edgeId][3];
            closedEdge = networkEdges[edgeId][6];

            edgeWeights[j] = manhattanDistance(connectingNodes[j], destNode) + edgeWeight;

            getExtendedNodes(connectingNodes[j], rerouteNode);

            extendedEdgeWeights[0] = 0;
            extendedEdgeWeights[1] = 0;
            extendedEdgeWeights[2] = 0;

            for (i = 0; i &lt; 3; i++)
            {
                if(extendedNodes[i] != -1)
                {
                    edgeId = getEdgeIndex(connectingNodes[j], extendedNodes[i]);

                    edgeWeight = networkEdges[edgeId][3];
    
                    extendedEdgeWeights[i] = manhattanDistance(extendedNodes[i], destNode) + edgeWeight;

                    for(k = 0; k &lt; 20; k++)
                    {
                        if((extendedNodes[i] == inNodes[k][0] &amp;&amp; inNodes[k][0] != destNode &amp;&amp; inNodes[k][1] != destNode) &amp;&amp; closedEdge == 1)
                        {
                            illegalInNode = 1;
                        }
                    }

                    if(illegalInNode == 1)
                    {
                        extendedEdgeWeights[i] = max;
                        illegalInNode = 0;
                        
                    }
                    else if (extendedEdgeWeights[i] &lt;  extendedEdgeWeights[bestExtension])
                    {
                        bestExtension = i;   
                    }
                    
                }
            }

            edgeWeights[j] = edgeWeights[j] + extendedEdgeWeights[bestExtension];

            for(k = 0; k &lt; 20; k++)
            {
                if((connectingNodes[j] == inNodes[k][0] &amp;&amp; inNodes[k][0] != destNode &amp;&amp; inNodes[k][1] != destNode) &amp;&amp; closedEdge == 1)
                {
                    illegalInNode = 1;
                }
            }

            if(illegalInNode == 1)
            {
                edgeWeights[j] = max;
            }            
            if( edgeWeights[j] &lt;  edgeWeights[bestConnection])
            {
                bestConnection = j;
            }
            illegalInNode = 0;
        }
    }

    return connectingNodes[bestConnection]; 
}

void simpleReroute()
{
    int carRoute[routeLenght] = route[curr_car];
    int i = 0;
    int destNode;
    int curNode = currentStartNode[curr_car][0];
    int curIndex = currentStartNode[curr_car][1];
    int prevNode = curNode;
    int rerouteNode;
    int bestConnection = 0;


    i = curIndex;
    while (carRoute[i+1] != -1)
    {            
        i++;
    }

    destNode = carRoute[i];
    if (curNode != destNode)
    {
        curIndex++;
        rerouteNode = route[curr_car][curIndex];

        while (rerouteNode != destNode)
        {
            bestConnection = 0;

            getConnectingNodes(rerouteNode, prevNode);
        
            bestConnection = getBestConnection(destNode, rerouteNode);
        
            carRoute[curIndex + 1] = bestConnection;
            prevNode = rerouteNode;
            rerouteNode = bestConnection;
            curIndex++;        
        }

        while(curIndex &lt; (routeLenght-1))
        {
            carRoute[curIndex+1] = -1;
            curIndex++;
        }         

        newRoute[curr_car] = carRoute;

    }
    
}

void dijkstra()
{
    int carRoute[routeLenght] = route[curr_car];
    int suggestedRoute[routeLenght];
    int selected[nodes], dist[nodes], prev[nodes];
    int i = 0, min, m , d, j;
    int destNode;
    int curNode;
    int curIndex = currentStartNode[curr_car][1];
    int rerouteNode;

    for (i = 0; i &lt; nodes; i++)
    {
        selected[i] = 0;
        dist[i] = max;
        prev[i] = -1;
    }

    i = curIndex;
    while (carRoute[i+1] != -1)
    {            
        i++;
    }

    destNode = carRoute[i];


    curIndex++;
    curNode = carRoute[curIndex];
    //Subtract 1 from curNode and destNode to make it work with the 0 indexed arrays
    curNode--;
    destNode--;
    rerouteNode = curNode;
    selected[rerouteNode] = 1;
    dist[rerouteNode] = 0;

    while(selected[destNode] == 0)
    {
        min = max;
        m = 0;
        for(i = 0; i &lt; nodes; i++)
        {
            d = dist[rerouteNode] + cost[rerouteNode][i];
            if(d &lt; dist[i] &amp;&amp; selected[i] == 0)
            {
                dist[i] = d;
                prev[i] = rerouteNode;
            }
            if(min &gt; dist[i] &amp;&amp; selected[i] == 0)
            {
                min = dist[i];
                m = i;
            }
        }
        rerouteNode = m;
        selected[rerouteNode] = 1;    
    }

    rerouteNode = destNode;
    j = 0;

    while (rerouteNode != curNode)
    {
        //Add 1 to rerouteNode to convert it back to our node numbers
        rerouteNode++;
        suggestedRoute[j] = rerouteNode;
        rerouteNode = prev[(rerouteNode -1)];
        j++;        
    }

    
    while (j &gt; 0)
    {
        j--;
        carRoute[curIndex+1] = suggestedRoute[j];
        curIndex++;        
    }

    while(curIndex &lt; (routeLenght-1))
    {
        carRoute[curIndex+1] = -1;
        curIndex++;
    }         

    newRoute[curr_car] = carRoute;

}






void choose_route()
{
    if(!carDone[curr_car])
    {
        reroute[curr_car] = 0;   

        dijkstra();
        //simpleReroute();
    }
                
}</declaration>
		<location id="id6" x="-909" y="-195">
		</location>
		<location id="id7" x="-714" y="-195">
			<urgent/>
		</location>
		<location id="id8" x="-510" y="-195">
			<urgent/>
		</location>
		<location id="id9" x="-510" y="-306">
			<name x="-520" y="-340">DoReroute</name>
			<urgent/>
		</location>
		<location id="id10" x="-178" y="-110">
			<name x="-221" y="-93">NoReroute</name>
			<urgent/>
		</location>
		<location id="id11" x="-110" y="-195">
			<urgent/>
		</location>
		<location id="id12" x="59" y="-195">
			<urgent/>
		</location>
		<location id="id13" x="-204" y="-306">
			<urgent/>
		</location>
		<location id="id14" x="-382" y="-195">
			<urgent/>
		</location>
		<location id="id15" x="187" y="-195">
			<name x="177" y="-229">Done</name>
		</location>
		<branchpoint id="id16" x="-382" y="-306">
		</branchpoint>
		<init ref="id6"/>
		<transition controllable="false">
			<source ref="id12"/>
			<target ref="id15"/>
		</transition>
		<transition controllable="false">
			<source ref="id13"/>
			<target ref="id11"/>
		</transition>
		<transition controllable="false">
			<source ref="id14"/>
			<target ref="id11"/>
			<label kind="assignment" x="-433" y="-178">route[curr_car] = newRoute[curr_car]</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id14"/>
			<label kind="probability" x="-374" y="-272">9</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id13"/>
			<label kind="probability" x="-323" y="-331">1</label>
		</transition>
		<transition controllable="false">
			<source ref="id9"/>
			<target ref="id16"/>
			<label kind="assignment" x="-493" y="-297">choose_route()</label>
		</transition>
		<transition controllable="false">
			<source ref="id7"/>
			<target ref="id11"/>
			<label kind="guard" x="-696" y="-416">reroute[curr_car] == 0</label>
			<nail x="-714" y="-382"/>
			<nail x="-110" y="-382"/>
		</transition>
		<transition controllable="false">
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="guard" x="-696" y="-229">reroute[curr_car] == 1</label>
		</transition>
		<transition controllable="false">
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="guard" x="-68" y="-221">curr_car &gt;= (N-1)</label>
			<label kind="synchronisation" x="-76" y="-238">DoneRerouting!</label>
		</transition>
		<transition controllable="false">
			<source ref="id11"/>
			<target ref="id7"/>
			<label kind="guard" x="-450" y="8">curr_car &lt; (N-1)</label>
			<label kind="assignment" x="-450" y="-17">curr_car++</label>
			<nail x="-110" y="-25"/>
			<nail x="-714" y="-25"/>
		</transition>
		<transition controllable="false">
			<source ref="id10"/>
			<target ref="id11"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id10"/>
			<nail x="-510" y="-110"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
		</transition>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-841" y="-187">Reroute?</label>
		</transition>
	</template>
	<system>// Place template instantiations here.


// List one or more processes to be composed into a system.
system Simulator, Rerouter;
    </system>
	<queries>
		<query>
			<formula>E&lt;&gt; Simulator.End</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy Opt =minE (totalTravelTime) [&lt;=horizon]: &lt;&gt; Simulator.End</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
