<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int routeLenght = 25;
const int max = 16000;
const int nodes = 57;
const int numEdges = 144;
const int N = 79;

const int pid[N] = {1236,
1245,1246,1249,1251,1252,1254,1255,1257,1258,1264,1265,1270,1271,1273,1274,1278,1279,1281,1282,1283,1284,1285,1286,1287,1289,1290,1291,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,
1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343}; 
int route[N][routeLenght] = {
{35,22,4,3,55,7,8,12,16,32,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,10,6,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,6,10,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,10,6,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,10,6,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,5,6,10,14,49,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,6,10,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,6,10,14,49,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,10,6,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,2,6,7,8,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,6,10,14,30,29,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,10,6,2,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,8,12,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{25,9,10,11,46,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,10,6,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,9,5,1,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,5,6,10,14,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{41,29,13,9,10,6,2,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,12,26,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,6,7,8,12,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,8,12,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,8,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,1,5,9,13,29,30,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,1,5,9,10,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,1,2,3,4,22,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{35,22,4,3,2,1,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,8,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,4,22,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,5,9,10,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,1,5,9,10,11,46,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{41,29,30,14,49,15,47,16,52,28,26,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,4,3,2,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,8,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,5,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{39,33,32,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{39,33,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,30,29,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,6,10,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,10,11,12,26,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{45,33,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,8,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{39,33,32,31,30,29,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{35,22,24,26,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,4,22,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,33,32,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,3,2,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{25,9,10,14,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,2,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{25,9,10,11,12,26,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{45,33,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{45,33,28,26,24,22,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,30,29,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,2,3,4,22,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,3,2,1,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,1,5,9,10,14,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{42,30,14,10,9,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{41,29,30,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,29,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,10,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,4,22,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{37,26,28,33,32,31,30,29,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,10,6,2,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{35,22,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,4,22,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}}; 
int newRoute[N][routeLenght] = {
{35,22,4,3,55,7,8,12,16,32,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,10,6,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,6,10,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,10,6,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,10,6,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,5,6,10,14,49,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,6,10,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,6,10,14,49,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,46,11,10,6,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,2,6,7,8,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,6,10,14,30,29,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,10,6,2,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,8,12,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{25,9,10,11,46,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,10,6,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,9,5,1,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,5,6,10,14,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{41,29,13,9,10,6,2,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,12,26,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,6,7,8,12,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,50,14,49,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,8,12,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,8,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,1,5,9,13,29,30,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,1,5,9,10,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,1,2,3,4,22,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{35,22,4,3,2,1,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,8,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,4,22,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,5,9,10,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,1,5,9,10,11,46,15,47,16,52,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{41,29,30,14,49,15,47,16,52,28,26,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,4,3,2,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,8,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,5,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{39,33,32,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{39,33,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,30,29,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,6,10,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,10,11,12,26,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{45,33,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,8,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{39,33,32,31,30,29,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{35,22,24,26,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,4,22,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,33,32,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,3,2,1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,48,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{25,9,10,14,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,2,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{25,9,10,11,12,26,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{45,33,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{45,33,28,26,24,22,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,30,29,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{43,57,31,48,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,2,3,4,22,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,3,2,1,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,55,7,56,11,46,15,49,14,50,13,51,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,1,5,9,10,14,30,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{42,30,14,10,9,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{41,29,30,31,57,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,29,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,51,13,9,10,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,46,11,56,7,55,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,4,22,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,4,3,54,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{37,26,28,33,32,31,30,29,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,53,28,52,16,47,15,49,14,10,6,2,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{34,22,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{35,22,24,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,54,3,4,22,24,26,28,53,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}}; 
const int nodePositions[57][3] = {{21,400,0},
{4,400,1000},{13,1000,400},{18,0,600},{11,800,800},{23,600,0},{32,1200,1000},{28,1000,1200},{42,1600,600},{48,1100,800},{55,500,800},{36,600,1600},{16,1000,1000},{38,1000,1600},{7,600,800},{53,1000,1300},{29,1200,400},{40,1200,0},{27,1000,0},{43,1600,800},{52,1000,1100},{1,400,400},{26,800,1200},{20,0,1000},{37,800,1600},{22,400,1200},{2,400,600},{3,400,800},{35,400,1600},{31,1200,800},{47,1000,900},{9,800,400},{45,1600,1200},{14,1000,600},{12,800,1000},{6,600,600},{17,0,400},{24,600,1200},{41,1600,400},{46,900,800},{30,1200,600},{39,1200,1600},{15,1000,800},{51,1000,300},{44,1600,1000},{10,800,600},{19,0,800},{25,800,0},{8,600,1000},{57,1300,800},{56,700,800},
{50,1000,500},{33,1200,1200},{54,300,800},{34,0,1200},{49,1000,700},{5,600,400}};
int timePassed[N] = {10,0,2,0,4,14,4,1,11,0,17,0,3,0,2,2,3,16,9,11,23,1,1,0,10,1,3,1,13,3,21,3,7,6,12,5,6,0,7,4,7,3,19,2,11,0,4,3,0,0,
9,3,0,0,0,46,2,11,6,8,14,11,2,33,7,0,28,26,24,0,19,17,17,16,16,15,6,4,1};
int currentStartNode[N][2] = {{32,9},
{55,12},{51,10},{55,12},{6,10},{57,9},{13,9},{49,8},{55,12},{24,5},{14,7},{10,7},{48,7},{52,8},{6,8},{14,8},{52,9},{14,4},{10,4},{12,7},{6,5},{16,8},{48,7},{8,5},{9,3},{10,4},{14,8},{4,4},{3,3},{24,3},{22,4},{46,5},{9,3},{49,4},{3,3},{7,4},{5,4},{48,4},{53,3},{30,3},{7,4},{10,4},{33,1},{7,4},{31,3},{24,2},{47,5},{7,4},{22,4},{32,4},{3,2},
{47,5},{54,1},{25,0},{48,3},{25,0},{52,3},{33,1},{28,2},{33,1},{57,1},{57,1},{2,1},{20,0},{54,1},{17,0},{42,0},{41,0},{27,0},{51,1},{38,0},{19,0},{20,0},{37,0},{38,0},{34,0},{34,0},{35,0},{19,0}};
int cost[nodes][nodes] = {{16000,198,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{198,16000,193,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,196,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,95,95,16000,16000},
{16000,16000,191,16000,16000,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,200,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{200,16000,16000,16000,16000,198,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,198,16000,16000,198,16000,196,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,193,16000,194,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,95,16000,16000},
{16000,16000,16000,198,16000,16000,191,16000,16000,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,198,16000,16000,16000,16000,200,16000,16000,193,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,200,16000,16000,198,16000,194,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,191,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,95,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,198,16000,16000,191,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,200,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,95,95,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,194,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,95,95,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,84,84,84,84,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,95,16000,16000,16000,16000,95,16000,16000,16000,16000,16000},
{419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,317,16000,16000,16000},
{16000,16000,16000,421,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,420,420,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,198,16000,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,421,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,420,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,198,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,317,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,95,95,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,200,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,193,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,95,16000,16000,16000,16000,16000,16000,16000,16000,95},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,191,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,193,16000,198,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,420,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,196,16000,16000,16000,198,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,421,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,420,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,420,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,317,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,420,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,420,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,317},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,419,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,94,16000,16000,16000,84,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,85,94,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,83,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,95,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,94,85,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,94,94,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,95,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,317,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,95,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,95,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,94,16000,16000,16000,16000,16000,16000,16000,16000,16000,317,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,95,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,317,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,95,16000,16000,16000,94,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000},
{16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,95,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,317,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000,16000}};
typedef int[0,nodes] node_t;

int travelHist[N][2]; 
//Hard coded in nodes
int inNodes[20][2] = {{17,0}, {18,0}, {54,19}, {20,0}, {34,0}, {35,0}, {36,0}, {37,0}, {53,38}, {39,0}, {45,0}, {44,0}, {57,43}, {42,0}, {41,0}, {40,0}, {51,27}, {25,0}, {23,0}, {21,0}};

//networkEdges constains touples of the form (fromNodeId, toNodeId, lanes, edgeweight, carsOnEdge)
int networkEdges[144][7] = {{21,1,1,26,0,393,0},
{4,8,1,12,0,186,0},{4,20,1,26,0,393,0},{4,3,1,12,0,179,0},{4,22,1,14,1,186,0},{13,51,2,6,1,89,0},{13,50,2,6,0,89,0},{13,29,1,12,0,179,0},{13,9,1,12,0,179,0},{18,2,1,26,0,393,0},{11,10,1,12,0,179,0},{11,56,2,6,0,89,1},{11,12,1,12,0,179,0},{11,46,2,6,0,89,0},{23,5,1,26,0,393,0},{32,16,1,12,0,179,0},{32,33,1,12,0,186,0},{32,31,1,14,1,179,0},{32,44,1,27,1,393,0},{28,26,1,12,0,179,0},{28,33,1,12,0,179,0},{28,52,2,6,1,89,0},{28,53,2,6,0,89,0},{42,30,1,27,1,393,0},{48,15,4,4,0,79,0},{48,31,3,6,2,89,0},{55,3,3,6,1,89,0},{55,7,3,5,0,89,0},{36,24,1,26,0,393,0},{16,32,1,12,0,179,0},{16,12,1,12,0,179,0},{16,52,2,6,1,89,0},{16,47,2,6,0,89,0},{38,53,2,21,2,296,0},{7,6,1,14,1,179,0},{7,8,1,15,2,179,0},{7,55,2,6,0,89,0},{7,56,2,6,1,89,1},{53,38,2,21,1,296,0},{53,28,3,5,0,89,0},{29,30,1,12,0,186,0},{29,41,1,26,0,393,0},{29,40,1,26,0,393,0},{29,13,1,12,0,179,0},{40,29,1,26,0,393,0},{27,51,2,21,1,296,0},{43,57,2,21,0,296,0},{52,16,3,6,1,89,0},{52,28,3,6,2,89,0},{1,17,1,26,0,393,0},{1,2,1,12,0,186,0},
{1,5,1,12,0,186,0},{1,21,1,26,0,393,0},{26,28,1,12,0,179,0},{26,12,1,12,0,186,0},{26,37,1,26,0,393,0},{26,24,1,12,0,186,0},{20,4,1,28,2,393,0},{37,26,1,27,1,393,0},{22,35,1,27,1,393,0},{22,34,1,27,1,393,0},{22,4,1,12,0,186,0},{22,24,1,12,0,186,0},{2,6,1,12,0,186,0},{2,18,1,26,0,393,0},{2,3,1,14,1,179,0},{2,1,1,12,0,186,0},{3,2,1,17,3,179,0},{3,4,1,12,0,179,0},{3,55,2,6,0,89,0},{3,54,2,6,0,89,0},{35,22,1,27,1,393,0},{31,30,1,14,1,179,0},{31,32,1,12,0,179,0},{31,48,2,6,0,89,0},{31,57,2,6,0,89,0},{47,16,3,5,0,89,0},{47,15,4,6,2,79,0},{9,10,1,14,1,186,0},{9,25,1,26,0,393,0},{9,5,1,12,0,186,0},{9,13,1,14,1,179,0},{45,33,1,26,0,393,0},{14,10,1,12,0,179,0},{14,30,1,15,2,179,0},{14,50,2,6,2,89,0},{14,49,2,6,0,89,0},{12,16,1,12,0,179,0},{12,26,1,14,1,186,0},{12,8,1,12,0,186,0},{12,11,1,12,0,179,0},{6,10,1,12,0,186,0},{6,2,1,12,0,186,0},{6,7,1,17,3,179,0},{6,5,1,12,0,186,0},{17,1,1,26,0,393,0},{24,26,1,12,0,186,0},{24,36,1,28,2,393,0},{24,8,1,12,0,186,0},{24,22,1,12,0,186,0},{41,29,1,27,1,393,0},
{46,15,4,5,1,79,0},{46,11,3,5,0,89,0},{30,42,1,26,0,393,0},{30,31,1,12,0,179,1},{30,14,1,12,0,179,0},{30,29,1,14,1,186,0},{39,33,1,26,0,393,0},{15,48,2,5,0,79,0},{15,49,2,5,0,79,0},{15,47,2,5,0,79,0},{15,46,2,5,0,79,0},{51,27,2,21,1,296,0},{51,13,3,6,1,89,0},{44,32,1,26,0,393,0},{10,6,1,14,1,186,0},{10,14,1,12,0,179,0},{10,9,1,12,0,186,0},{10,11,1,15,2,179,0},{19,54,2,21,2,296,0},{25,9,1,27,1,393,0},{8,12,1,12,0,186,0},{8,4,1,12,0,186,0},{8,7,1,12,0,179,0},{8,24,1,12,0,186,0},{57,43,2,21,1,296,0},{57,31,3,6,2,89,0},{56,7,3,5,0,89,1},{56,11,3,5,0,89,1},{50,14,3,5,0,89,0},{50,13,3,5,0,89,0},{33,32,1,12,0,186,0},{33,39,1,26,0,393,0},{33,45,1,26,0,393,0},{33,28,1,17,3,179,0},{54,3,3,6,1,89,0},{54,19,2,21,0,296,0},{34,22,1,28,2,393,0},{49,14,3,5,0,89,0},{49,15,4,6,2,79,0},{5,6,1,12,0,186,0},{5,23,1,26,0,393,0},{5,9,1,12,0,186,0},{5,1,1,14,1,186,0}};

int curr_car = 0;
int uniquetest = 0;
int reroute[N] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
int carDone[N];
const int horizon = 40;
int Done = 0;
double rerouteTime = 0.0;
/*const int INT32_MAX = 2147483647;
typedef int[0, INT32_MAX] int32_t;
int32_t totalTravelTime = 0;
*/
double totalTravelTime = 0.0;

typedef int[0, N-1] id_car;

broadcast chan Reroute, DoneRerouting;

int getEdgeIndex(int fromNode, int toNode)
{
    int k = 0;
    while(networkEdges[k][0] != fromNode || networkEdges[k][1] != toNode)
    {
        k++;
        if(k == numEdges)
        {
            return -1;
        }
    }
    return k;
}

</declaration>
	<template>
		<name x="5" y="5">Simulator</name>
		<declaration>clock x,y;
// needs abosolute path to be used in tempmodel
///home/thomas/AAUP7/UppaalModels/Libraries/lib.so

import "/Libraries/lib.so" {
	int calc_edge_weight(int lanes, int cars, int lenght);
	//alias = int calc_edge_weight(int lanes, int cars, int lenght);
};

void constructor()
{
    int i = 0;

    for(i = 0; i &lt; N; i++)
    {
        carDone[i] = 0;
        travelHist[i][0] = 0; 
        travelHist[i][1] = 0; 
    }
}


//check if cars have changed edge
void flow_traffic()
{
    int i = 0;
    int currentEdge = 0;
    int timePassedCarI = 0;
    int edgeTT = 0;
    int edgeId;
    int fromNode, toNode, nextToNode;  
    int fromIndex;  
    int allDone = 0;


    for (i = 0; i &lt; N; i++)
    {
        allDone += carDone[i];
        if(!carDone[i])
        {
            timePassedCarI = timePassed[i];
            
            fromNode = currentStartNode[i][0];
            fromIndex = currentStartNode[i][1];
            toNode = route[i][fromIndex+1];

            if(toNode == -1)
            {
                carDone[i] = 1;
            }
            else
            {
                edgeId = getEdgeIndex(fromNode, toNode);
        
                edgeTT = networkEdges[edgeId][3];

                if(timePassedCarI &gt;= edgeTT)
                {
                    currentStartNode[i][0] = toNode;
                    currentStartNode[i][1]++;
                    //totalTravelTime = totalTravelTime + (timePassedCarI/100);
                    timePassed[i] = 0;
                    networkEdges[edgeId][4] = networkEdges[edgeId][4] - 1;
                    nextToNode = route[i][fromIndex+2];

                    if(nextToNode != -1)
                    {
                        edgeId = getEdgeIndex(toNode, nextToNode);
                        networkEdges[edgeId][4] = networkEdges[edgeId][4] + 1;
                        travelHist[i][0] += 1;
                        travelHist[i][1] += networkEdges[edgeId][3];
                    }
                }
                else
                {
                    //update time passed
                    timePassed[i] += 10;
                }
            }
        }
    }

    if(allDone == N)
    {
        Done = 1;
    }

}

void update_weights()
{
    int i = 0;
    int carsOnEdge = 0;
    
    for(i = 0; i &lt; numEdges; i++)
    {
        carsOnEdge = networkEdges[i][4];        
        networkEdges[i][3] = calc_edge_weight(networkEdges[i][2], carsOnEdge, networkEdges[i][5]);
    }
}

void get_routing_result()
{
    int i = 0;
    int avgEdgeTT;

    for(i = 0; i &lt; N; i++)
    {
        if(travelHist[i][0] == 0)
        {
            avgEdgeTT = 0;
        }
        else
        {
            avgEdgeTT = (travelHist[i][1] / travelHist[i][0]);
        }
        
        totalTravelTime = totalTravelTime + (avgEdgeTT/10); 
    }

}</declaration>
		<location id="id0" x="-561" y="-552">
			<name x="-612" y="-586">SimulateTraffic</name>
			<label kind="invariant" x="-646" y="-611">y &lt;= 10 &amp;&amp; x &lt;= horizon</label>
		</location>
		<location id="id1" x="-986" y="-552">
			<name x="-996" y="-586">Init</name>
			<committed/>
		</location>
		<location id="id2" x="-850" y="-552">
			<name x="-892" y="-586">Constructed</name>
			<urgent/>
		</location>
		<location id="id3" x="-349" y="-552">
			<name x="-359" y="-586">End</name>
		</location>
		<location id="id4" x="-723" y="-552">
			<name x="-765" y="-586">RerouteWait</name>
			<urgent/>
		</location>
		<init ref="id1"/>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-824" y="-543">Reroute!</label>
		</transition>
		<transition controllable="false">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-535" y="-433">y == 10 &amp;&amp; x &lt; horizon</label>
			<label kind="assignment" x="-671" y="-433">flow_traffic(), 
update_weights(),
y = 0</label>
			<nail x="-647" y="-437"/>
			<nail x="-469" y="-437"/>
		</transition>
		<transition controllable="false">
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="guard" x="-510" y="-535">x == horizon || Done == 1</label>
			<label kind="assignment" x="-510" y="-552">get_routing_result()</label>
		</transition>
		<transition controllable="false">
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-705" y="-543">DoneRerouting?</label>
		</transition>
		<transition controllable="false">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="assignment" x="-969" y="-543">constructor()</label>
		</transition>
	</template>
	<template>
		<name>Rerouter</name>
		<declaration>void dijkstra()
{
    int carRoute[routeLenght] = route[curr_car];
    int suggestedRoute[routeLenght];
    int selected[nodes], dist[nodes], prev[nodes];
    int i = 0, min, m , d, j;
    int destNode;
    int curNode;
    int curIndex = currentStartNode[curr_car][1];
    int rerouteNode;

    for (i = 0; i &lt; nodes; i++)
    {
        selected[i] = 0;
        dist[i] = max;
        prev[i] = -1;
    }

    i = curIndex;
    while (carRoute[i+1] != -1)
    {            
        i++;
    }

    destNode = carRoute[i];


    curIndex++;
    curNode = carRoute[curIndex];
    //Subtract 1 from curNode and destNode to make it work with the 0 indexed arrays
    curNode--;
    destNode--;
    rerouteNode = curNode;
    selected[rerouteNode] = 1;
    dist[rerouteNode] = 0;

    while(selected[destNode] == 0)
    {
        min = max;
        m = 0;
        for(i = 0; i &lt; nodes; i++)
        {
            d = dist[rerouteNode] + cost[rerouteNode][i];
            if(d &lt; dist[i] &amp;&amp; selected[i] == 0)
            {
                dist[i] = d;
                prev[i] = rerouteNode;
            }
            if(min &gt; dist[i] &amp;&amp; selected[i] == 0)
            {
                min = dist[i];
                m = i;
            }
        }
        rerouteNode = m;
        selected[rerouteNode] = 1;    
    }

    rerouteNode = destNode;
    j = 0;

    while (rerouteNode != curNode)
    {
        //Add 1 to rerouteNode to convert it back to our node numbers
        rerouteNode++;
        suggestedRoute[j] = rerouteNode;
        rerouteNode = prev[(rerouteNode -1)];
        j++;        
    }

    
    while (j &gt; 0)
    {
        j--;
        carRoute[curIndex+1] = suggestedRoute[j];
        curIndex++;        
    }

    while(curIndex &lt; (routeLenght-1))
    {
        carRoute[curIndex+1] = -1;
        curIndex++;
    }         

    newRoute[curr_car] = carRoute;

}






void choose_route()
{
    if(!carDone[curr_car])
    {
        reroute[curr_car] = 0;   

        dijkstra();
    }
                
}</declaration>
		<location id="id5" x="-892" y="-195">
			<name x="-901" y="-229">Init</name>
		</location>
		<location id="id6" x="-773" y="-195">
			<name x="-824" y="-187">Called</name>
			<urgent/>
		</location>
		<location id="id7" x="-544" y="-195">
			<name x="-535" y="-221">Rerouting</name>
			<urgent/>
		</location>
		<location id="id8" x="-544" y="-297">
			<name x="-586" y="-331">DoReroute</name>
			<urgent/>
		</location>
		<location id="id9" x="-195" y="-102">
			<name x="-229" y="-93">NoReroute</name>
			<urgent/>
		</location>
		<location id="id10" x="-110" y="-195">
			<name x="-102" y="-187">CarDone</name>
			<urgent/>
		</location>
		<location id="id11" x="93" y="-195">
			<name x="51" y="-187">SimulatorSync</name>
			<urgent/>
		</location>
		<location id="id12" x="-204" y="-297">
			<name x="-246" y="-331">RejectRoute</name>
			<urgent/>
		</location>
		<location id="id13" x="-416" y="-195">
			<name x="-459" y="-187">AcceptRoute</name>
			<urgent/>
		</location>
		<location id="id14" x="93" y="-272">
			<name x="68" y="-306">Done</name>
		</location>
		<branchpoint id="id15" x="-416" y="-297">
		</branchpoint>
		<init ref="id5"/>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="guard" x="-739" y="-297">reroute[curr_car] == 2</label>
		</transition>
		<transition controllable="false">
			<source ref="id11"/>
			<target ref="id14"/>
		</transition>
		<transition controllable="false">
			<source ref="id12"/>
			<target ref="id10"/>
		</transition>
		<transition controllable="false">
			<source ref="id13"/>
			<target ref="id10"/>
			<label kind="assignment" x="-391" y="-221">route[curr_car] = newRoute[curr_car]</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id13"/>
			<label kind="probability" x="-408" y="-289">9</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id12"/>
			<label kind="probability" x="-399" y="-323">1</label>
		</transition>
		<transition controllable="false">
			<source ref="id8"/>
			<target ref="id15"/>
			<label kind="assignment" x="-527" y="-289">choose_route()</label>
		</transition>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id10"/>
			<label kind="guard" x="-467" y="-391">reroute[curr_car] == 0</label>
			<nail x="-773" y="-365"/>
			<nail x="-110" y="-365"/>
		</transition>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-722" y="-187">reroute[curr_car] == 1</label>
		</transition>
		<transition controllable="false">
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="guard" x="-68" y="-238">curr_car &gt;= (N-1)</label>
			<label kind="synchronisation" x="-68" y="-221">DoneRerouting!</label>
		</transition>
		<transition controllable="false">
			<source ref="id10"/>
			<target ref="id6"/>
			<label kind="guard" x="-450" y="-8">curr_car &lt; (N-1)</label>
			<label kind="assignment" x="-450" y="-25">curr_car++</label>
			<nail x="-110" y="-25"/>
			<nail x="-773" y="-25"/>
		</transition>
		<transition controllable="false">
			<source ref="id9"/>
			<target ref="id10"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id9"/>
			<nail x="-544" y="-102"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
		</transition>
		<transition controllable="false">
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-867" y="-221">Reroute?</label>
		</transition>
	</template>
	<system>// Place template instantiations here.


// List one or more processes to be composed into a system.
system Simulator, Rerouter;
    </system>
	<queries>
		<query>
			<formula>E&lt;&gt; Simulator.End</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy Opt =minE (totalTravelTime) [&lt;=horizon]: &lt;&gt; Simulator.End</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
